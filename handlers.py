from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from utils import get_unlim_response, send_long_message, get_google_cse_info, extract_topic
from database import save_user_data, get_user_data, get_user_history
from api_key_manager import START_IMAGE_PATH, PAY_IMAGE_PATH, FEEDBACK_CHAT_ID
import logging

router = Router()

@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–î—Ä—É–≥"
    await save_user_data(user_id, {
        "first_name": first_name,
        "last_interaction": message.date.isoformat()
    })
    text = (
        f"<b>–ü—Ä–∏–≤–µ—Ç, {first_name}! üòä‚ú®</b>\n"
        "–Ø –≠–º–º–∞, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Å–æ–≤–µ—Ç–∞–º–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å. "
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∏ –Ω–∞—á–Ω–µ–º! üòÑ\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "<b>/info</b> ‚Äî —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ\n"
        "<b>/pay</b> ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "<b>/feedback</b> ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "<b>/clear</b> ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
    )
    if START_IMAGE_PATH:
        try:
            await message.answer_photo(photo=START_IMAGE_PATH, caption=text, parse_mode="HTML")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await send_long_message(message, text, parse_mode="HTML")
    else:
        await send_long_message(message, text, parse_mode="HTML")

@router.message(Command("info"))
async def info(message: Message):
    text = (
        "<b>–ö—Ç–æ —è —Ç–∞–∫–∞—è? üòä‚ú®</b>\n"
        "–Ø –≠–º–º–∞, —Ç–≤–æ–π –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω! –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å. "
        "–ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É, –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å. "
        "–Ø –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω–æ–π! üòÑ\n\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ, –∏ –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç!"
    )
    await send_long_message(message, text, parse_mode="HTML")

@router.message(Command("pay"))
async def pay(message: Message):
    text = (
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç! üíù</b>\n"
        "–•–æ—á–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ? –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—É —Ä–∞—Å—Ç–∏! üòä\n"
        "–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "- <b>1 –º–µ—Å—è—Ü</b>: –ë–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ–∏—á–∏\n"
        "- <b>3 –º–µ—Å—è—Ü–∞</b>: –°–∫–∏–¥–∫–∞ –∏ –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n"
        "- <b>–ì–æ–¥</b>: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞!\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω!"
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω", callback_data="show_plans")]
    ])
    if PAY_IMAGE_PATH:
        try:
            await message.answer_photo(photo=PAY_IMAGE_PATH, caption=text, parse_mode="HTML", reply_markup=reply_markup)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await send_long_message(message, text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await send_long_message(message, text, parse_mode="HTML", reply_markup=reply_markup)

@router.message(Command("feedback"))
async def feedback(message: Message):
    text = (
        "<b>–û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤! üì©</b>\n"
        "–ú–Ω–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ! –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ –º–æ–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ, –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. üòä\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –∏ —è –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–π –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!"
    )
    await send_long_message(message, text, parse_mode="HTML")

@router.message(Command("clear"))
async def clear_history(message: Message):
    user_id = message.from_user.id
    try:
        user_id_str = str(user_id)
        query = db.collection("messages").where("user_id", "==", user_id_str)
        docs = await query.get()
        for doc in docs:
            await doc.reference.delete()
        logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è user_id: {user_id}")
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! üßπ</b>\n–¢–µ–ø–µ—Ä—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ù–∞–ø–∏—à–∏, –æ —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å! üòä‚ú®"
        await send_long_message(message, text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id {user_id}: {e}")
        text = "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
        await send_long_message(message, text, parse_mode="HTML")

@router.message(Command("cancel"))
async def cancel(message: Message):
    text = "<b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! üö´</b>\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–ø–µ—Ä—å? üòä‚ú®"
    await send_long_message(message, text, parse_mode="HTML")

@router.callback_query(F.data == "show_plans")
async def show_plans(callback: CallbackQuery):
    text = (
        "<b>–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏! üíù</b>\n"
        "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
        "- <b>1 –º–µ—Å—è—Ü</b>: –ë–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ–∏—á–∏\n"
        "- <b>3 –º–µ—Å—è—Ü–∞</b>: –°–∫–∏–¥–∫–∞ –∏ –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n"
        "- <b>–ì–æ–¥</b>: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞!\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –Ω–∏–∂–µ:"
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="plan_1month")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", callback_data="plan_3months")],
        [InlineKeyboardButton(text="–ì–æ–¥", callback_data="plan_year")]
    ])
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=reply_markup)
    await callback.answer()

@router.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    user_text = message.text
    try:
        user_data = await get_user_data(user_id)
        history = await get_user_history(user_id)
        is_code_request = any(keyword in user_text.lower() for keyword in topic_keywords["–∫–æ–¥"])
        search_data = None
        active_topic = extract_topic(user_text)
        if is_code_request:
            response = await get_unlim_response(user_id, user_text, history, is_code_request=True)
        else:
            search_data = await get_google_cse_info(user_text, active_topic)
            response = await get_unlim_response(user_id, user_text, history, is_code_request=False, search_data=search_data)
        await send_long_message(message, response, parse_mode="HTML")
        await save_user_data(user_id, {
            "last_interaction": message.date.isoformat(),
            "last_topic": active_topic
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {e}")
        text = "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä"
        await send_long_message(message, text, parse_mode="HTML")