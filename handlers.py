import logging
from aiogram import Dispatcher, types, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, BotCommand
from datetime import datetime, timedelta
import os
from utils import validate_and_fix_html, get_unlim_response, get_google_cse_info, extract_topic, is_relevant
from database import get_user_data, save_user_data, save_message_to_firestore

logger = logging.getLogger(__name__)

FEEDBACK_CHAT_ID = os.getenv("FEEDBACK_CHAT_ID")
MINIAPP_URL = os.getenv("MINIAPP_URL")
MINIAPP_BUTTON_TEXT = os.getenv("MINIAPP_BUTTON_TEXT", "üéÄ–ü—Ä–æ—Å–º–æ—Ç—ÄüéÄ")
PAY_IMAGE_PATH = os.getenv("PAY_IMAGE_PATH", "./images/pay_image.jpg")
START_IMAGE_PATH = os.getenv("START_IMAGE_PATH", "./images/start_image.jpg")

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="üòá –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π"),
        BotCommand(command="/info", description="üë©üèª‚Äçü¶∞ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ"),
        BotCommand(command="/pay", description="üíù –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand(command="/clear", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand(command="/feedback", description="üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"),
        BotCommand(command="/cancel", description="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"),
    ]
    await bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def start_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    }
    start_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –≠–º–º–∞ ‚Äî —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω –∏ –ø–æ–º–æ—â–Ω–∏–∫. üåü</b>\n\n"
        "–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–º–æ—á—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏. "
        "–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–≤–æ–π –¥–µ–Ω—å —è—Ä—á–µ, –∏–¥–µ–∏ ‚Äî —è—Å–Ω–µ–µ, –∞ —Ü–µ–ª–∏ ‚Äî –±–ª–∏–∂–µ!\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–∫–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —è —Ç—É—Ç, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å. "
        "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å —É–¥–æ–±–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.\n\n"
        "<i>–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –ø—É—Å—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –Ω–æ–≤—ã–º –ø—Ä–∏—è—Ç–Ω—ã–º –æ–ø—ã—Ç–æ–º.</i> ‚ú®"
    )
    sent_message = None
    if START_IMAGE_PATH.startswith("http"):
        try:
            sent_message = await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=START_IMAGE_PATH,
                caption=start_text,
                parse_mode="HTML",
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /start, message_id: {sent_message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /start: {e}")
    else:
        if os.path.exists(START_IMAGE_PATH):
            try:
                photo = FSInputFile(START_IMAGE_PATH)
                sent_message = await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption=start_text,
                    parse_mode="HTML",
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /start, message_id: {sent_message.message_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /start: {e}")
    if sent_message is None:
        sent_message = await message.answer(start_text, parse_mode="HTML")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /start, message_id: {sent_message.message_id}")
    await save_user_data(user_id, user_data[user_id])

async def info_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /info –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    user_data[user_id]["awaiting_feedback"] = False
    info_text = (
        "<b>–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠–º–º–∞</b>\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –¥–∞—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è. "
        "–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –±—ã—Ç—å —Ä—è–¥–æ–º –≤ –º–æ–º–µ–Ω—Ç—ã —Ä–∞–¥–æ—Å—Ç–∏ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π, –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–Ω—è—Ç—å —Å–µ–±—è –≥–ª—É–±–∂–µ, —Å—Ç–∞–≤–∏—Ç—å —è—Å–Ω—ã–µ —Ü–µ–ª–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é.\n\n"
        "<b>üìö –ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚¶Å <i>–ß—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</i>, —á—Ç–æ–±—ã –≤–æ–≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å.\n"
        "‚¶Å <i>–ü–æ–º–æ–≥–∞—Ç—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º, —Ç—Ä–µ–≤–æ–≥–æ–π –∏ –≥—Ä—É—Å—Ç—å—é</i>, –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        "‚¶Å <i>–°–æ–≤–º–µ—Å—Ç–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å SMART-—Ü–µ–ª–∏</i> –∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
        "‚¶Å <i>–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö</i> –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—Ç—å –≤–ø–µ—Ä—ë–¥.\n"
        "‚¶Å <i>–°–æ–∑–¥–∞–≤–∞—Ç—å —É—é—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</i> –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –≥–¥–µ —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –ø–æ–π–º—É—Ç –∏ –Ω–µ –æ—Å—É–¥—è—Ç.\n"
        "‚¶Å <i>–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å, –æ —á—ë–º –º—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª–∏</i>, —á—Ç–æ–±—ã –Ω–∞—à–∏ –±–µ—Å–µ–¥—ã –±—ã–ª–∏ –∂–∏–≤—ã–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏. "
        "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —è –ø–æ–º–Ω—é —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ü–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏ –º–æ–≥—É –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è —Å –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º ‚Äî —Å–ª–æ–≤–Ω–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.\n\n"
        "<b>üìö –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—è?</b>\n"
        "‚¶Å –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç ‚Äî —è —Ç–≤–æ–π —Ä–∞–∑—É–º–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –¥—Ä—É–≥, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "‚¶Å –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –≥–ª—É–±–æ–∫–∏ –∏ –ø—Ä–æ–¥—É–º–∞–Ω—ã, —è —É—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –∂–µ–ª–∞–Ω–∏—è.\n"
        "‚¶Å –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –Ω–∞–π—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –∂–∏–∑–Ω–∏.\n"
        "‚¶Å –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ –º–Ω–æ–π ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –∂–∏–≤–æ–π, –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.\n\n"
        "<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –º–µ–Ω—è, –¥—Ä—É–≥ ‚Äî –≤–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º. –ñ–¥—É —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏!</i> üíï"
    )
    await message.answer(info_text, parse_mode="HTML")
    await save_user_data(user_id, user_data[user_id])

async def clear_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = {
        "history": [],
        "active_topic": None,
        "premium": user_data.get(user_id, {}).get("premium", False),
        "expiry": user_data.get(user_id, {}).get("expiry", None),
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    }
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! üòä –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.", parse_mode="HTML")
    await save_user_data(user_id, user_data[user_id])

async def pay_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /pay –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    user_data[user_id]["awaiting_feedback"] = False
    pay_text = (
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π ‚Äî –≠–º–º–æ–π! –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, "
        "—á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –æ—Ü–µ–Ω–∏—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. üòä\n\n"
        "–ö–æ–≥–¥–∞ –ª–∏–º–∏—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å –ø–æ–º–æ—â—å—é –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî "
        "—ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!\n\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–º–æ—á—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã —Ç–µ–±–µ –∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! üíñ"
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÄ–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–øüéÄ", callback_data="show_plans")]
    ])
    sent_message = None
    if PAY_IMAGE_PATH.startswith("http"):
        try:
            sent_message = await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=PAY_IMAGE_PATH,
                caption=pay_text,
                parse_mode="HTML",
                reply_markup=reply_markup,
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /pay, message_id: {sent_message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /pay: {e}")
    else:
        if os.path.exists(PAY_IMAGE_PATH):
            try:
                photo = FSInputFile(PAY_IMAGE_PATH)
                sent_message = await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption=pay_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /pay, message_id: {sent_message.message_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /pay: {e}")
    if sent_message is None:
        sent_message = await message.answer(pay_text, reply_markup=reply_markup, parse_mode="HTML")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /pay, message_id: {sent_message.message_id}")
    user_data[user_id]["last_pay_message_id"] = sent_message.message_id
    await save_user_data(user_id, user_data[user_id])

async def feedback_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /feedback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    user_data[user_id]["awaiting_feedback"] = True
    user_data[user_id]["user_feedback_message_id"] = message.message_id
    feedback_text = (
        "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –∏ –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –ª—É—á—à–µ!</b> üôè\n\n"
        "–ß–µ—Ä–µ–∑ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–∂–Ω–∞ –¥–ª—è —Ç–µ–±—è:\n\n"
        "‚¶Å <i>–°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è.</i>\n"
        "‚¶Å <i>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ –º–Ω–æ–π —É–¥–æ–±–Ω–µ–µ –∏ –ø—Ä–∏—è—Ç–Ω–µ–µ.</i>\n"
        "‚¶Å <i>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.</i>\n"
        "‚¶Å <i>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.</i>\n"
        "‚¶Å <i>–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏–ª–∏ —Ç–µ–º–∞–º.</i>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ, "
        "—á—Ç–æ–±—ã —è –∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–µ–ª–∞—Ç—å ¬´–≠–º–º—É¬ª –ª—É—á—à–µ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n"
        "<b>–¢–≤–æ—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Äî –∫–ª—é—á –∫ –º–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ —É—á–∞—Å—Ç–∏–µ!</b> üíñ"
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel_feedback")]
    ])
    try:
        sent_message = await message.answer(feedback_text, parse_mode="HTML", reply_markup=reply_markup)
        user_data[user_id]["feedback_message_id"] = sent_message.message_id
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, message_id: {sent_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è /feedback: {e}")
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        user_data[user_id]["awaiting_feedback"] = False
    await save_user_data(user_id, user_data[user_id])

async def cancel_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    if user_data[user_id].get("awaiting_feedback", False):
        user_data[user_id]["awaiting_feedback"] = False
        try:
            if user_data[user_id].get("feedback_message_id"):
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=user_data[user_id]["feedback_message_id"],
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            if user_data[user_id].get("user_feedback_message_id"):
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=user_data[user_id]["user_feedback_message_id"],
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /feedback –¥–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π /feedback: {e}")
        user_data[user_id]["feedback_message_id"] = None
        user_data[user_id]["user_feedback_message_id"] = None
        await message.answer("–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π.", parse_mode="HTML")
    else:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ, —Ç–∞–∫ —á—Ç–æ –≤—Å—ë –æ–∫! üòä –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")
    await save_user_data(user_id, user_data[user_id])

async def reply_command(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id != FEEDBACK_CHAT_ID:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reply –≤–Ω–µ —á–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (chat_id: {chat_id})")
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏! üòä", parse_mode="HTML")
        return
    text = message.text.strip()
    match = re.match(r"^/reply\s+(\d+)\s+(.+)$", text, re.DOTALL)
    if not match:
        logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /reply: {text}")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: <b>/reply &lt;user_id&gt; &lt;—Ç–µ–∫—Å—Ç&gt;</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>/reply 123456789 –°–ø–∞—Å–∏–±–æ –∑–∞ feedback!</b>",
            parse_mode="HTML",
        )
        return
    target_user_id = match.group(1)
    reply_text = match.group(2)
    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"<b>–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n{reply_text}",
            parse_mode="HTML",
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {reply_text}")
        await message.answer(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}! üòä", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}. üòî "
            "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.",
            parse_mode="HTML",
        )

async def handle_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data
    logger.info(f"Callback {action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    last_pay_message_id = user_data[user_id].get("last_pay_message_id")
    if last_pay_message_id:
        try:
            await callback.message.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=last_pay_message_id,
            )
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_pay_message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {last_pay_message_id}: {e}")
    if action == "show_plans":
        plans_text = (
            "<b>–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!</b> üòä\n\n"
            "–ü–æ –∫–∞–∂–¥–æ–º—É —Ç–∞—Ä–∏—Ñ—É —Ç—ã –ø–æ–ª—É—á–∏—à—å <b>50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</b> –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π! üí¨\n\n"
            "‚¶Å <b>1 –º–µ—Å—è—Ü ‚Äî 250‚≠êÔ∏è (~429‚ÇΩ)</b>\n"
            "  –≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞—á–∞—Ç—å. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞. –≠—Ç–æ —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –•–∏—Ç!\n\n"
            "‚¶Å <b>3 –º–µ—Å—è—Ü–∞ ‚Äî 600‚≠êÔ∏è (~1008‚ÇΩ)</b>\n"
            "  –í—ã–≥–æ–¥–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã. –í—Å–µ–≥–æ 336‚ÇΩ –≤ –º–µ—Å—è—Ü –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ –º–æ–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.\n\n"
            "‚¶Å <b>12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2000‚≠êÔ∏è (~3298‚ÇΩ)</b>\n"
            "  –î–ª—è —Ç–µ—Ö, –∫—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—Ç –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ ‚Äî –≤—Å–µ–≥–æ 274‚ÇΩ –≤ –º–µ—Å—è—Ü.\n\n"
            "<i>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–ª–∞–Ω, –∏ —è –±—É–¥—É —Ä—è–¥–æ–º, –ø–æ–º–æ–≥–∞—è –∏–¥—Ç–∏ –∫ –º–µ—á—Ç–∞–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!</i> ‚ú®"
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÄ1 –ú–µ—Å—è—ÜüéÄ", callback_data="plan_1month")],
            [InlineKeyboardButton(text="üéÄ3 –º–µ—Å—è—Ü–∞üéÄ", callback_data="plan_3months")],
            [InlineKeyboardButton(text="üéÄ12 –º–µ—Å—è—Ü–µ–≤üéÄ", callback_data="plan_12months")],
        ])
        sent_message = None
        if PAY_IMAGE_PATH.startswith("http"):
            try:
                sent_message = await callback.message.bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=PAY_IMAGE_PATH,
                    caption=plans_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏, message_id: {sent_message.message_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        else:
            if os.path.exists(PAY_IMAGE_PATH):
                try:
                    photo = FSInputFile(PAY_IMAGE_PATH)
                    sent_message = await callback.message.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=photo,
                        caption=plans_text,
                        parse_mode="HTML",
                        reply_markup=reply_markup,
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏, message_id: {sent_message.message_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        if sent_message is None:
            sent_message = await callback.message.answer(plans_text, reply_markup=reply_markup, parse_mode="HTML")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏, message_id: {sent_message.message_id}")
        user_data[user_id]["last_pay_message_id"] = sent_message.message_id
    elif action == "plan_1month":
        plan_text = (
            "1 –º–µ—Å—è—Ü ‚Äî 250‚≠êÔ∏è (~429‚ÇΩ)"
            "–≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é. "
            "–Ø –±—É–¥—É —Å —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ–º–æ–≥–∞—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ —Ç–≤–æ–∏–º —Ü–µ–ª—è–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! üòä‚ú®"
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 1 –º–µ—Å—è—Ü", pay=True)],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_plans")],
        ])
        try:
            sent_message = await callback.message.bot.send_invoice(
                chat_id=callback.message.chat.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≠–º–º—É ‚Äî 1 –º–µ—Å—è—Ü",
                description=plan_text,
                payload="emma_premium_1month",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", "amount": 250}],
                reply_markup=reply_markup,
            )
            user_data[user_id]["last_pay_message_id"] = sent_message.message_id
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–≤–æ–π—Å –¥–ª—è 1 –º–µ—Å—è—Ü–∞, message_id: {sent_message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è 1 –º–µ—Å—è—Ü–∞: {e}")
            await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–ø–ª–∞—Ç—ã. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", parse_mode="HTML")
    elif action == "plan_3months":
        plan_text = (
            "3 –º–µ—Å—è—Ü–∞ ‚Äî 600‚≠êÔ∏è (~1008‚ÇΩ)"
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
            "–Ø –ø–æ–º–æ–≥—É –Ω–µ —Å–±–∏—Ç—å—Å—è —Å –∫—É—Ä—Å–∞, –ø–æ–¥–¥–µ—Ä–∂—É –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å–∫–∞–∂—É –ø—É—Ç–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! üòä‚ú®"
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 3 –º–µ—Å—è—Ü–∞", pay=True)],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_plans")],
        ])
        try:
            sent_message = await callback.message.bot.send_invoice(
                chat_id=callback.message.chat.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≠–º–º—É ‚Äî 3 –º–µ—Å—è—Ü–∞",
                description=plan_text,
                payload="emma_premium_3months",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞", "amount": 600}],
                reply_markup=reply_markup,
            )
            user_data[user_id]["last_pay_message_id"] = sent_message.message_id
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–≤–æ–π—Å –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤, message_id: {sent_message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤: {e}")
            await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–ø–ª–∞—Ç—ã. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", parse_mode="HTML")
    elif action == "plan_12months":
        plan_text = (
            "12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2000‚≠êÔ∏è (~3298‚ÇΩ)"
            "–≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∫–æ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –º–µ—á—Ç–∞–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. "
            "–ì–æ–¥ –º–æ–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚Äî –≤–º–µ—Å—Ç–µ –º—ã –¥–æ—Å—Ç–∏–≥–Ω–µ–º –≤—Å–µ–≥–æ, —á—Ç–æ –∑–∞–¥—É–º–∞–Ω–æ! üòä‚ú®"
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤", pay=True)],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_plans")],
        ])
        try:
            sent_message = await callback.message.bot.send_invoice(
                chat_id=callback.message.chat.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≠–º–º—É ‚Äî 12 –º–µ—Å—è—Ü–µ–≤",
                description=plan_text,
                payload="emma_premium_12months",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤", "amount": 2000}],
                reply_markup=reply_markup,
            )
            user_data[user_id]["last_pay_message_id"] = sent_message.message_id
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–≤–æ–π—Å –¥–ª—è 12 –º–µ—Å—è—Ü–µ–≤, message_id: {sent_message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è 12 –º–µ—Å—è—Ü–µ–≤: {e}")
            await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–ø–ª–∞—Ç—ã. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", parse_mode="HTML")
    elif action == "back_to_plans":
        plans_text = (
            "<b>–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!</b> üòä\n\n"
            "–ü–æ –∫–∞–∂–¥–æ–º—É —Ç–∞—Ä–∏—Ñ—É —Ç—ã –ø–æ–ª—É—á–∏—à—å <b>50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</b> –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π! üí¨\n\n"
            "‚¶Å <b>1 –º–µ—Å—è—Ü ‚Äî 250‚≠êÔ∏è (~429‚ÇΩ)</b>\n"
            "  –≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞—á–∞—Ç—å. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞. –≠—Ç–æ —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –•–∏—Ç!\n\n"
            "‚¶Å <b>3 –º–µ—Å—è—Ü–∞ ‚Äî 600‚≠êÔ∏è (~1008‚ÇΩ)</b>\n"
            "  –í—ã–≥–æ–¥–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã. –í—Å–µ–≥–æ 336‚ÇΩ –≤ –º–µ—Å—è—Ü –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ –º–æ–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.\n\n"
            "‚¶Å <b>12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2000‚≠êÔ∏è (~3298‚ÇΩ)</b>\n"
            "  –î–ª—è —Ç–µ—Ö, –∫—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—Ç –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ ‚Äî –≤—Å–µ–≥–æ 274‚ÇΩ –≤ –º–µ—Å—è—Ü.\n\n"
            "<i>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–ª–∞–Ω, –∏ —è –±—É–¥—É —Ä—è–¥–æ–º, –ø–æ–º–æ–≥–∞—è –∏–¥—Ç–∏ –∫ –º–µ—á—Ç–∞–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!</i> ‚ú®"
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÄ1 –ú–µ—Å—è—ÜüéÄ", callback_data="plan_1month")],
            [InlineKeyboardButton(text="üéÄ3 –º–µ—Å—è—Ü–∞üéÄ", callback_data="plan_3months")],
            [InlineKeyboardButton(text="üéÄ12 –º–µ—Å—è—Ü–µ–≤üéÄ", callback_data="plan_12months")],
        ])
        sent_message = None
        if PAY_IMAGE_PATH.startswith("http"):
            try:
                sent_message = await callback.message.bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=PAY_IMAGE_PATH,
                    caption=plans_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ (–Ω–∞–∑–∞–¥), message_id: {sent_message.message_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ (–Ω–∞–∑–∞–¥): {e}")
        else:
            if os.path.exists(PAY_IMAGE_PATH):
                try:
                    photo = FSInputFile(PAY_IMAGE_PATH)
                    sent_message = await callback.message.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=photo,
                        caption=plans_text,
                        parse_mode="HTML",
                        reply_markup=reply_markup,
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ (–Ω–∞–∑–∞–¥), message_id: {sent_message.message_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ (–Ω–∞–∑–∞–¥): {e}")
        if sent_message is None:
            sent_message = await callback.message.answer(plans_text, reply_markup=reply_markup, parse_mode="HTML")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ (–Ω–∞–∑–∞–¥), message_id: {sent_message.message_id}")
        user_data[user_id]["last_pay_message_id"] = sent_message.message_id
    await save_user_data(user_id, user_data[user_id])
    await callback.answer()

async def cancel_feedback_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è /feedback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    if user_data[user_id].get("awaiting_feedback", False):
        user_data[user_id]["awaiting_feedback"] = False
        try:
            if user_data[user_id].get("feedback_message_id"):
                await callback.message.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=user_data[user_id]["feedback_message_id"],
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            if user_data[user_id].get("user_feedback_message_id"):
                await callback.message.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=user_data[user_id]["user_feedback_message_id"],
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /feedback –¥–ª—è {user_id}")
            await callback.message.answer(
                "–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π.",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π /feedback: {e}")
            await callback.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                parse_mode="HTML",
            )
        user_data[user_id]["feedback_message_id"] = None
        user_data[user_id]["user_feedback_message_id"] = None
    else:
        await callback.message.answer(
            "–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π.",
            parse_mode="HTML",
        )
    await save_user_data(user_id, user_data[user_id])
    await callback.answer()

async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    user_id = pre_checkout_query.from_user.id
    logger.info(f"Pre-checkout query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {pre_checkout_query.invoice_payload}")
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    await save_user_data(user_id, user_data[user_id])

async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload
    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payload}")
    if payload == "emma_premium_1month":
        duration = "1 –º–µ—Å—è—Ü"
        expiry_date = datetime.now() + timedelta(days=30)
        amount = 250
    elif payload == "emma_premium_3months":
        duration = "3 –º–µ—Å—è—Ü–∞"
        expiry_date = datetime.now() + timedelta(days=90)
        amount = 600
    elif payload == "emma_premium_12months":
        duration = "12 –º–µ—Å—è—Ü–µ–≤"
        expiry_date = datetime.now() + timedelta(days=365)
        amount = 2000
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: {payload}")
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –æ–ø–ª–∞—Ç–æ–π! üòî –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", parse_mode="HTML")
        return
    user_data[user_id]["premium"] = True
    user_data[user_id]["expiry"] = expiry_date.timestamp()
    await save_user_data(user_id, user_data[user_id])
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ç—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ {duration}! üéâ "
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date.strftime('%Y-%m-%d')}. "
        f"–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üòä‚ú®",
        parse_mode="HTML",
    )

async def handle_message(message: types.Message):
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update –¥–ª—è user {message.from_user.id}: {message.text[:50]}...")
    if not message.text:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üòä –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–º–æ–≥—É.")
        return
    user_id = message.from_user.id
    user_text = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text}")
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(0.5)
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    if user_data[user_id].get("awaiting_feedback", False):
        if not FEEDBACK_CHAT_ID:
            logger.error("FEEDBACK_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
            await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", parse_mode="HTML")
            user_data[user_id]["awaiting_feedback"] = False
            user_data[user_id]["feedback_message_id"] = None
            user_data[user_id]["user_feedback_message_id"] = None
            await save_user_data(user_id, user_data[user_id])
            return
        username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
        feedback_text = (
            f"<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{username} (ID: {user_id})</b>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}\n\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/reply {user_id} –í–∞—à –æ—Ç–≤–µ—Ç</b>"
        )
        try:
            await message.bot.send_message(
                chat_id=FEEDBACK_CHAT_ID,
                text=feedback_text,
                parse_mode="HTML",
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç {user_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {FEEDBACK_CHAT_ID}")
            try:
                if user_data[user_id].get("feedback_message_id"):
                    await message.bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=user_data[user_id]["feedback_message_id"],
                    )
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                if user_data[user_id].get("user_feedback_message_id"):
                    await message.bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=user_data[user_id]["user_feedback_message_id"],
                    )
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /feedback –¥–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π /feedback: {e}")
            await message.answer(
                "<b>–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!</b> üôå\n\n"
                "–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—é —Ç–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–µ—Ä–µ–¥–∞–º –µ—ë –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. "
                "–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–ª–∞—Ç—å ¬´–≠–º–º—É¬ª —É–º–Ω–µ–µ, –¥–æ–±—Ä–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–∏—Å–∞—Ç—å ‚Äî "
                "—è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å.\n\n"
                "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π!</b> üí´",
                parse_mode="HTML",
            )
            user_data[user_id]["awaiting_feedback"] = False
            user_data[user_id]["feedback_message_id"] = None
            user_data[user_id]["user_feedback_message_id"] = None
            await save_user_data(user_id, user_data[user_id])
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {FEEDBACK_CHAT_ID}: {e}")
            await message.answer(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ! üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                parse_mode="HTML",
            )
            user_data[user_id]["awaiting_feedback"] = False
            user_data[user_id]["feedback_message_id"] = None
            user_data[user_id]["user_feedback_message_id"] = None
            await save_user_data(user_id, user_data[user_id])
            return
    history = user_data[user_id]["history"]
    active_topic = user_data[user_id]["active_topic"]
    clarification_keywords = [
        "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–µ—Ç–∞–ª–∏", "–µ—â—ë", "tell me more", "details",
        "–∞ —á—Ç–æ –Ω–∞—Å—á—ë—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë", "–±–æ–ª—å—à–µ", "—É–≥–ª—É–±–∏—Å—å", "–¥–∞, —Ö–æ—á—É"
    ]
    is_code_request = any(keyword in user_text.lower() for keyword in [
        "–Ω–∞–ø–∏—à–∏ –∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∫–æ–¥ –Ω–∞", "python", "javascript",
        "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É", "–∫–æ–¥ –Ω–∞ –ø–∏—Ç–æ–Ω–µ", "–∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"
    ])
    history.append({"role": "user", "content": user_text})
    search_data = None
    if not is_code_request:
        is_clarification = any(keyword in user_text.lower() for keyword in clarification_keywords)
        if is_clarification:
            search_query = active_topic if active_topic else user_text
            search_data = await get_google_cse_info(search_query, active_topic)
            if search_data and not is_relevant(search_data, user_text, active_topic):
                logger.info(f"–ü–æ–∏—Å–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –¥–ª—è '{user_text}', fallback –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
                search_data = None
        else:
            search_data = await get_google_cse_info(user_text)
            if search_data and not is_relevant(search_data, user_text):
                logger.info(f"–ü–æ–∏—Å–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –¥–ª—è '{user_text}', fallback –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
                search_data = None
        if search_data:
            logger.info(f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(search_data)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        if isinstance(search_data, str):
            response = search_data
            await send_long_message(message, response, parse_mode="HTML")
        else:
            response = await get_unlim_response(user_id, user_text, history, is_code_request, search_data, use_html=True)
            await send_long_message(message, response, parse_mode="HTML")
    else:
        response = await get_unlim_response(user_id, user_text, history, is_code_request)
        await send_long_message(message, response, parse_mode="HTML")
    history.append({"role": "assistant", "content": response})
    user_data[user_id]["history"] = history[-20:]
    user_data[user_id]["active_topic"] = extract_topic(response)
    logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data[user_id]['history']}")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data[user_id]['active_topic']}")
    await save_user_data(user_id, user_data[user_id])

async def handle_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {action}")
    await callback.message.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    await asyncio.sleep(0.5)
    user_data[user_id] = user_data.get(user_id, {
        "history": [],
        "active_topic": None,
        "premium": False,
        "expiry": None,
        "last_pay_message_id": None,
        "awaiting_feedback": False,
        "feedback_message_id": None,
        "user_feedback_message_id": None,
    })
    if action in ["show_plans", "plan_1month", "plan_3months", "plan_12months", "back_to_plans"]:
        await handle_subscription_callback(callback)
        return
    elif action == "cancel_feedback":
        await cancel_feedback_callback(callback)
        return
    history = user_data[user_id]["history"]
    active_topic = user_data[user_id]["active_topic"]
    response = await get_unlim_response(user_id, action, history, is_code_request=False, use_html=True)
    await send_long_message(callback.message, response, parse_mode="HTML")
    history.append({"role": "assistant", "content": response})
    user_data[user_id]["history"] = history[-20:]
    user_data[user_id]["active_topic"] = extract_topic(response)
    await save_user_data(user_id, user_data[user_id])
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, CommandStart())
    dp.message.register(info_command, Command("info"))
    dp.message.register(pay_command, Command("pay"))
    dp.message.register(clear_command, Command("clear"))
    dp.message.register(feedback_command, Command("feedback"))
    dp.message.register(cancel_command, Command("cancel"))
    dp.message.register(reply_command, Command("reply"))
    dp.message.register(handle_message)
    dp.callback_query.register(handle_callback)
    dp.pre_checkout_query.register(process_pre_checkout_query)
    dp.message.register(process_successful_payment, lambda message: message.successful_payment is not None)

user_data = {}