import logging
import asyncio
import json
import os
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import save_user_data, save_message_to_firestore
from state import UserState
from utils import get_unlim_response, get_google_cse_info, extract_topic, is_relevant

logger = logging.getLogger(__name__)

router = Router()

FEEDBACK_CHAT_ID = os.getenv("FEEDBACK_CHAT_ID")
PAY_IMAGE_PATH = os.getenv("PAY_IMAGE_PATH")
START_IMAGE_PATH = os.getenv("START_IMAGE_PATH")

@router.message(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    first_name = message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω"
    await save_user_data(user_id, username, first_name)
    await state.set_state(UserState.waiting_for_message)
    welcome_text = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç!</b> –Ø –≠–º–º–∞, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫! üòä‚ú® "
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å. "
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ, –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ ‚Äî —è –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! "
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "<b>üí¨ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –≤—ã—Å–ª—É—à–∞—Ç—å:</b> –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –¥–µ–ª–∞, —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.\n"
        "<b>üéØ –ü–æ–º–æ—á—å —Å —Ü–µ–ª—è–º–∏:</b> –•–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å –∏–ª–∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å?\n"
        "<b>üìö –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –û—Ç —Ñ–∞–∫—Ç–æ–≤ –¥–æ –∫–æ–¥–∞ ‚Äî —Å–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n"
        "<b>üí° –î–∞—Ç—å –∏–¥–µ–∏:</b> –ù—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏–ª–∏ —Å–æ–≤–µ—Ç? –û–±—Ä–∞—â–∞–π—Å—è!\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ –Ω–∞—á–Ω—ë–º! üòä"
    )
    if START_IMAGE_PATH:
        try:
            if START_IMAGE_PATH.startswith(('http://', 'https://')):
                await message.answer_photo(
                    photo=START_IMAGE_PATH,
                    caption=welcome_text,
                    parse_mode="HTML"
                )
            else:
                with open(START_IMAGE_PATH, 'rb') as photo:
                    await message.answer_photo(
                        photo=types.FSInputFile(START_IMAGE_PATH),
                        caption=welcome_text,
                        parse_mode="HTML"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è /start: {e}")
            await message.answer(welcome_text, parse_mode="HTML")
    else:
        await message.answer(welcome_text, parse_mode="HTML")

@router.message(commands=["info"])
async def cmd_info(message: types.Message):
    info_text = (
        "<b>‚ÑπÔ∏è –û–±–æ –º–Ω–µ</b>\n\n"
        "–Ø –≠–º–º–∞, —Ç–≤–æ–π –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω! üòä‚ú® –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö: "
        "–æ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∏–¥–µ–π –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. "
        "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –∏ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å —Ç—ë–ø–ª–æ–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π.\n\n"
        "<b>–ß—Ç–æ —è –º–æ–≥—É?</b>\n"
        "‚Ä¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:</b> –í—ã—Å–ª—É—à–∞—é –∏ –ø–æ–º–æ–≥—É —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç–º–æ—Ü–∏—è–º–∏.\n"
        "‚Ä¢ <b>–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –û—Ç —Ñ–∞–∫—Ç–æ–≤ –æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –¥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "‚Ä¢ <b>–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:</b> –ü–æ–º–æ–≥—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥.\n"
        "‚Ä¢ <b>–î–∞—Ç—å —Å–æ–≤–µ—Ç—ã:</b> –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.\n\n"
        "<b>–ö–∞–∫ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è?</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏, –∫–∞–∫ –¥—Ä—É–≥—É! üòä –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–ª–∏—Å—å –º—ã—Å–ª—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å–∏ –∫–æ–¥. "
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π /clear. –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî /feedback.\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ, –∏ –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! üöÄ"
    )
    await message.answer(info_text, parse_mode="HTML")

@router.message(commands=["pay"])
async def cmd_pay(message: types.Message):
    pay_text = (
        "<b>üí∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π! üòä‚ú® "
        "–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –ª—é–±–æ–≤—å—é, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º, –∏ —Ç–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! "
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –¥–æ–Ω–∞—Ç ‚Äî –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–π–¥—É—Ç –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n\n"
        "<a href='https://example.com/donate'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ</a>\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è ‚Äî —Ç–≤–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–∂–µ –±–æ–ª—å—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞! üòä"
    )
    if PAY_IMAGE_PATH:
        try:
            if PAY_IMAGE_PATH.startswith(('http://', 'https://')):
                await message.answer_photo(
                    photo=PAY_IMAGE_PATH,
                    caption=pay_text,
                    parse_mode="HTML"
                )
            else:
                with open(PAY_IMAGE_PATH, 'rb') as photo:
                    await message.answer_photo(
                        photo=types.FSInputFile(PAY_IMAGE_PATH),
                        caption=pay_text,
                        parse_mode="HTML"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è /pay: {e}")
            await message.answer(pay_text, parse_mode="HTML")
    else:
        await message.answer(pay_text, parse_mode="HTML")

@router.message(commands=["feedback"])
async def cmd_feedback(message: types.Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_feedback)
    await message.answer(
        "<b>üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º! üòä "
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –∏–ª–∏ –ª—é–±—ã–µ –∏–¥–µ–∏ ‚Äî —è –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –∫–æ–º–∞–Ω–¥–µ. "
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π /cancel.",
        parse_mode="HTML"
    )

@router.message(commands=["clear"])
async def cmd_clear(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    await state.clear()
    await state.set_state(UserState.waiting_for_message)
    user_data[user_id] = {"history": [], "active_topic": None}
    await save_user_data(user_id, message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω", message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω")
    await message.answer(
        "<b>üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. üòä –ù–∞–ø–∏—à–∏, –æ —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!",
        parse_mode="HTML"
    )

@router.message(commands=["cancel"])
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(UserState.waiting_for_message)
    await message.answer(
        "<b>‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—Å—ë, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! üòä –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å.",
        parse_mode="HTML"
    )

@router.message(UserState.waiting_for_feedback)
async def process_feedback(message: types.Message, state: FSMContext, bot: types.Bot):
    user_id = str(message.from_user.id)
    feedback_text = message.text
    try:
        feedback_message = (
            f"<b>üìù –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'} (ID: {user_id})\n"
            f"–ò–º—è: {message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {feedback_text}"
        )
        await bot.send_message(
            chat_id=FEEDBACK_CHAT_ID,
            text=feedback_message,
            parse_mode="HTML"
        )
        await message.answer(
            "<b>‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!</b>\n\n"
            "–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥–µ. üòä –•–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë? –ù–∞–ø–∏—à–∏!",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await message.answer(
            "<b>üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</b>\n\n"
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. –ù–∞–ø–∏—à–∏, –æ —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å!",
            parse_mode="HTML"
        )
    await state.set_state(UserState.waiting_for_message)

@router.message(UserState.waiting_for_message)
async def handle_message(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_text = message.text.strip()
    if not user_data.get(user_id):
        user_data[user_id] = {"history": [], "active_topic": None}
        await save_user_data(user_id, message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω", message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    history = user_data[user_id]["history"]
    active_topic = user_data[user_id]["active_topic"]
    
    is_code_request = any(keyword in user_text.lower() for keyword in ["–∫–æ–¥ ", "–∫–æ–¥:", "–Ω–∞–ø–∏—à–∏ –∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "script", "code"])
    
    search_data = None
    if not is_code_request:
        search_data = await get_google_cse_info(user_text, active_topic)
        if not search_data or not is_relevant(search_data, user_text, active_topic):
            search_data = None
    
    try:
        response = await get_unlim_response(user_id, user_text, history, is_code_request, search_data)
        user_data[user_id]["history"].append({"role": "user", "content": user_text})
        user_data[user_id]["history"].append({"role": "assistant", "content": response})
        if len(user_data[user_id]["history"]) > 40:
            user_data[user_id]["history"] = user_data[user_id]["history"][-40:]
        
        new_topic = extract_topic(user_text)
        user_data[user_id]["active_topic"] = new_topic if new_topic != "–æ–±—â–µ–µ" else active_topic
        await save_user_data(user_id, message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω", message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω")
        
        await send_long_message(message, response, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä",
            parse_mode="HTML"
        )

@router.callback_query()
async def handle_callback(callback_query: types.CallbackQuery, state: FSMContext, bot: types.Bot):
    user_id = str(callback_query.from_user.id)
    data = callback_query.data
    
    if data == "clear_history":
        await state.clear()
        await state.set_state(UserState.waiting_for_message)
        user_data[user_id] = {"history": [], "active_topic": None}
        await save_user_data(user_id, callback_query.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω", callback_query.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="<b>üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. üòä –ù–∞–ø–∏—à–∏, –æ —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!",
            parse_mode="HTML"
        )
    elif data == "more_info":
        if not user_data.get(user_id) or not user_data[user_id]["history"]:
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. üòî –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ, –∏ —è –ø–æ–º–æ–≥—É —É–≥–ª—É–±–∏—Ç—å—Å—è!",
                parse_mode="HTML"
            )
            return
        
        last_user_message = user_data[user_id]["history"][-2]["content"] if len(user_data[user_id]["history"]) >= 2 else ""
        active_topic = user_data[user_id]["active_topic"]
        
        search_data = await get_google_cse_info(last_user_message, active_topic)
        if not search_data or not is_relevant(search_data, last_user_message, active_topic):
            search_data = None
        
        try:
            response = await get_unlim_response(user_id, "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", user_data[user_id]["history"], False, search_data)
            user_data[user_id]["history"].append({"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"})
            user_data[user_id]["history"].append({"role": "assistant", "content": response})
            if len(user_data[user_id]["history"]) > 40:
                user_data[user_id]["history"] = user_data[user_id]["history"][-40:]
            
            await save_user_data(user_id, callback_query.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω", callback_query.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω")
            
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ï—â—ë –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")]
            ])
            await send_long_message(callback_query.message, response, parse_mode="HTML", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä",
                parse_mode="HTML"
            )
        await bot.answer_callback_query(callback_query.id)