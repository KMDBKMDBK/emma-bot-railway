import logging
import asyncio
import os
from dotenv import load_dotenv
from openai import AsyncOpenAI
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
UNLIM_API_KEY = os.getenv("UNLIM_API_KEY")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Unlim API
client = AsyncOpenAI(
    api_key=UNLIM_API_KEY,
    base_url="https://unlimbot.com/v1"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
user_history = {}

def clean_markdown(text):
    """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Markdown –¥–ª—è Telegram (MarkdownV2)"""
    lines = text.split('\n')
    in_code_block = False
    cleaned_lines = []
    for line in lines:
        if line.strip().startswith('```'):
            in_code_block = not in_code_block
            cleaned_lines.append(line)
        elif in_code_block:
            cleaned_lines.append(line)
        else:
            for char in ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
                line = line.replace(char, f'\\{char}')
            cleaned_lines.append(line)
    
    cleaned_text = '\n'.join(cleaned_lines)[:4000]
    if cleaned_text.count('```') % 2 != 0:
        cleaned_text += '\n```'
    return cleaned_text

async def get_google_cse_info(query: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ Google Custom Search JSON API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–ª—è.
    :param query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                "key": GOOGLE_API_KEY,
                "cx": GOOGLE_CSE_ID,
                "q": query,
                "num": 3
            }
            async with session.get("https://www.googleapis.com/customsearch/v1", params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if "error" in data:
                        logging.error(f"Google CSE –æ—à–∏–±–∫–∞: {data['error']['message']}")
                        return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–∏—Å–∫–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
                    
                    results = data.get("items", [])
                    if not results:
                        return "–ò–∑–≤–∏–Ω–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. üòî –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!"
                    
                    formatted_results = []
                    for result in results:
                        title = result.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                        snippet = result.get("snippet", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        link = result.get("link", "–ë–µ–∑ —Å—Å—ã–ª–∫–∏")
                        formatted_results.append({
                            "title": title,
                            "snippet": snippet,
                            "link": link
                        })
                    return formatted_results
                else:
                    logging.error(f"Google CSE HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–∏—Å–∫–æ–º. üòî –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Google CSE: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä"

async def get_unlim_response(user_text, history, is_code_request=False, search_data=None):
    try:
        system_prompt = (
            "–¢—ã –≠–º–º–∞, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ —É–º–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω, –∫–∞–∫ @GPT4AgentsBot. –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –ü–†–ê–í–î–ò–í–û, —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤. "
            "–ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ MarkdownV2, –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ (—ç–∫—Ä–∞–Ω–∏—Ä—É–π –∏—Ö –∫–∞–∫ \\[—Ç–µ–∫—Å—Ç\\]\\(—Å—Å—ã–ª–∫–∞\\)). "
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç, –æ—Ç–≤–µ—á–∞–π: '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. üòî –•–æ—á–µ—à—å, —É—Ç–æ—á–Ω–∏–º –∏–ª–∏ —Å–ø—Ä–æ—Å–∏–º —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?' "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∫–æ–¥, –Ω–∞–ø–∏—à–∏ —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º MarkdownV2 —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏ (```). –ü–æ—Å–ª–µ –∫–æ–¥–∞ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (‚¶Å) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å. "
            "–î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º —Ç–æ–Ω–æ–º –∏ —ç–º–æ–¥–∑–∏ üòä‚ú®. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–≥–ª—É–±–∏—Ç—å—Å—è: '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!' "
            "–ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ –º–µ—Ç–æ–¥—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ MarkdownV2 –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
        )
        messages = [
            {"role": "system", "content": system_prompt},
            *history[-10:],
            {"role": "user", "content": user_text}
        ]
        if search_data and isinstance(search_data, list):
            search_content = "–î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞:\n"
            for i, result in enumerate(search_data, 1):
                search_content += (
                    f"{i}. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['snippet']}\n"
                    f"–°—Å—ã–ª–∫–∞: {result['link']}\n\n"
                )
            messages.append({"role": "user", "content": search_content})
        
        response = await client.chat.completions.create(
            model="gpt-5-chat",
            messages=messages,
            temperature=0.3,
            max_tokens=1500 if is_code_request else 200
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Unlim API: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä"

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_history[user_id] = []
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≠–º–º–∞, —Ç–≤–æ–π —É–º–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω, –∫–∞–∫ @GPT4AgentsBot. –ú–æ–≥—É –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –ø–∏—Å–∞—Ç—å –∫–æ–¥ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß—Ç–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ? üòä‚ú®")

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text.strip()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {user_text}")
    
    is_code_request = any(keyword in user_text.lower() for keyword in [
        "–Ω–∞–ø–∏—à–∏ –∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∫–æ–¥ –Ω–∞", "python", "javascript",
        "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É", "–∫–æ–¥ –Ω–∞ –ø–∏—Ç–æ–Ω–µ", "–∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"
    ])
    
    if user_id not in user_history:
        user_history[user_id] = []
    user_history[user_id].append({"role": "user", "content": user_text})
    
    if not is_code_request:
        search_data = await get_google_cse_info(user_text)
        if isinstance(search_data, str):
            response = search_data
        else:
            response = await get_unlim_response(user_text, user_history.get(user_id, []), is_code_request, search_data)
    else:
        response = await get_unlim_response(user_text, user_history.get(user_id, []), is_code_request)
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –û—Ç–≤–µ—Ç –æ—Ç API: {response[:100]}...")
    
    cleaned_response = clean_markdown(response)
    try:
        await message.answer(cleaned_response, parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        await message.answer(response[:4000], parse_mode=None)
    
    user_history[user_id].append({"role": "assistant", "content": response})

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {action}")
    
    response = await get_unlim_response(action, user_history.get(user_id, []), is_code_request=False)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –û—Ç–≤–µ—Ç –æ—Ç API: {response[:100]}...")
    cleaned_response = clean_markdown(response)
    try:
        await callback.message.answer(cleaned_response, parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        await callback.message.answer(response[:4000], parse_mode=None)
    
    user_history[user_id].append({"role": "assistant", "content": response})
    await callback.answer()

async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    asyncio.run(main())