import logging
import re
import aiohttp
import time
from openai import AsyncOpenAI
from bs4 import BeautifulSoup
import os
from database import save_user_data, save_message_to_firestore
from state import user_data
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

logger = logging.getLogger(__name__)

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL_NAME = os.getenv("MODEL_NAME", "openai/gpt-oss-120b:free")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID")
MINIAPP_URL = os.getenv("MINIAPP_URL")
MINIAPP_BUTTON_TEXT = os.getenv("MINIAPP_BUTTON_TEXT", "üéÄ–ü—Ä–æ—Å–º–æ—Ç—ÄüéÄ")
NUM_SEARCH_RESULTS = int(os.getenv("NUM_SEARCH_RESULTS", 7))

client = AsyncOpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
)
logger.info("OpenRouter API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

processed_updates = set()

clarification_keywords = [
    "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–µ—Ç–∞–ª–∏", "–µ—â—ë", "tell me more", "details",
    "–∞ —á—Ç–æ –Ω–∞—Å—á—ë—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë", "–±–æ–ª—å—à–µ", "—É–≥–ª—É–±–∏—Å—å", "–¥–∞, —Ö–æ—á—É"
]

topic_keywords = {
    "–≤—Å–µ–ª–µ–Ω–Ω–∞—è": ["–≤—Å–µ–ª–µ–Ω–Ω–∞—è", "–∫–æ—Å–º–æ—Å", "–≥–∞–ª–∞–∫—Ç–∏–∫–∞", "—Ç—ë–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è", "—Ç—ë–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–±–æ–ª—å—à–æ–π –≤–∑—Ä—ã–≤"],
    "–º—É–∑—ã–∫–∞": ["–≥—Ä—É–ø–ø–∞", "—Å–æ–ª–∏—Å—Ç", "–ø–µ—Å–Ω—è", "–∞–ª—å–±–æ–º", "–∫–æ–Ω—Ü–µ—Ä—Ç"],
    "–∫–æ–¥": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "python", "javascript"],
    "–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç": ["–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ü–µ–ª–∏"],
    "—ç–º–æ—Ü–∏–∏": ["—ç–º–æ—Ü–∏–∏", "—Å—Ç—Ä–µ—Å—Å", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Å—á–∞—Å—Ç—å–µ", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–≥–∞–¥–∂–µ—Ç—ã", "ai", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
}

def extract_topic(content: str) -> str:
    content_lower = content.lower()
    if "–∏–∑–≤–∏–Ω–∏" in content_lower or "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in content_lower:
        return "–æ–±—â–µ–µ"
    for topic, keywords in topic_keywords.items():
        if sum(keyword in content_lower for keyword in keywords) >= 2:
            return topic
    words = re.findall(r'\w+', content_lower)
    if len(words) >= 2:
        return " ".join(words[:2])
    return "–æ–±—â–µ–µ"

def is_relevant(search_results: list, query: str, active_topic: str = None) -> bool:
    if not search_results:
        return False
    query_lower = query.lower()
    topic_lower = active_topic.lower() if active_topic else ""
    key_terms = set(re.findall(r'\w+', query_lower + " " + topic_lower))
    relevant_count = 0
    for result in search_results:
        title_lower = result.get("title", "").lower()
        snippet_lower = result.get("snippet", "").lower()
        if any(term in title_lower or term in snippet_lower for term in key_terms):
            relevant_count += 1
    relevance_ratio = relevant_count / len(search_results)
    logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {relevance_ratio * 100:.2f}% ({relevant_count}/{len(search_results)})")
    return relevance_ratio > 0.5

def validate_and_fix_html(text: str) -> str:
    try:
        soup = BeautifulSoup(text, "html.parser")
        if not soup.find():
            return text
        text = str(soup)
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
        text = re.sub(r'###\s*(.*?)\n', r'<b>\1</b>\n', text)
        supported_tags = ['b', 'i', 'a']
        tag_stack = []
        fixed_text = ""
        i = 0
        while i < len(text):
            if text[i] == '<' and i + 1 < len(text):
                if text[i + 1] == '/':
                    match = re.match(r'</([a-zA-Z]+)>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags and tag_stack and tag_stack[-1] == tag:
                            tag_stack.pop()
                            fixed_text += match.group(0)
                            i += len(match.group(0))
                        else:
                            i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
                else:
                    match = re.match(r'<([a-zA-Z]+)(?:\s+[^>]*)?>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags:
                            tag_stack.append(tag)
                            fixed_text += match.group(0)
                        else:
                            fixed_text += match.group(0).replace('<', '&lt;').replace('>', '&gt;')
                        i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
            else:
                fixed_text += text[i]
                i += 1
        while tag_stack:
            tag = tag_stack.pop()
            fixed_text += f'</{tag}>'
        fixed_text = re.sub(r'<[^>]+>', lambda m: m.group(0) if re.match(r'</?(b|i|a)(?:\s+[^>]*)?>', m.group(0)) else '', fixed_text)
        if text != fixed_text:
            logger.warning(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω HTML: {text[:100]}... -> {fixed_text[:100]}...")
        return fixed_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HTML —Å BeautifulSoup: {e}")
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
        text = re.sub(r'###\s*(.*?)\n', r'<b>\1</b>\n', text)
        supported_tags = ['b', 'i', 'a']
        tag_stack = []
        fixed_text = ""
        i = 0
        while i < len(text):
            if text[i] == '<' and i + 1 < len(text):
                if text[i + 1] == '/':
                    match = re.match(r'</([a-zA-Z]+)>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags and tag_stack and tag_stack[-1] == tag:
                            tag_stack.pop()
                            fixed_text += match.group(0)
                            i += len(match.group(0))
                        else:
                            i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
                else:
                    match = re.match(r'<([a-zA-Z]+)(?:\s+[^>]*)?>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags:
                            tag_stack.append(tag)
                            fixed_text += match.group(0)
                        else:
                            fixed_text += match.group(0).replace('<', '&lt;').replace('>', '&gt;')
                        i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
            else:
                fixed_text += text[i]
                i += 1
        while tag_stack:
            tag = tag_stack.pop()
            fixed_text += f'</{tag}>'
        fixed_text = re.sub(r'<[^>]+>', lambda m: m.group(0) if re.match(r'</?(b|i|a)(?:\s+[^>]*)?>', m.group(0)) else '', fixed_text)
        if text != fixed_text:
            logger.warning(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω HTML (–±–µ–∑ BS4): {text[:100]}... -> {fixed_text[:100]}...")
        return fixed_text

async def check_link_status(session: aiohttp.ClientSession, url: str) -> bool:
    try:
        async with session.head(url, timeout=5, ssl=False) as response:
            return response.status == 200
    except Exception as e:
        logger.warning(f"–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ {url}: {e}")
        return False

async def get_google_cse_info(query: str, active_topic: str = None):
    if any(keyword in query.lower() for keyword in clarification_keywords) and active_topic:
        query = active_topic
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                "key": GOOGLE_API_KEY,
                "cx": GOOGLE_CSE_ID,
                "q": query,
                "num": NUM_SEARCH_RESULTS,
                "gl": "ru",
                "hl": "ru",
            }
            async with session.get("https://www.googleapis.com/customsearch/v1", params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if "error" in data:
                        logger.error(f"Google CSE –æ—à–∏–±–∫–∞: {data['error']['message']}")
                        return None
                    results = data.get("items", [])
                    if not results:
                        logger.info(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                        return None
                    unique_results = []
                    seen_links = set()
                    for result in results:
                        link = result.get("link")
                        if link not in seen_links:
                            seen_links.add(link)
                            unique_results.append(result)
                    valid_results = []
                    for result in unique_results:
                        snippet = result.get("snippet", "").lower()
                        if "404" in snippet or "not found" in snippet or "—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in snippet:
                            logger.warning(f"–ò—Å–∫–ª—é—á—ë–Ω –ø–ª–æ—Ö–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: {result.get('link')}")
                            continue
                        if await check_link_status(session, result.get("link")):
                            valid_results.append({
                                "title": result.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                                "snippet": result.get("snippet", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
                                "link": result.get("link", "–ë–µ–∑ —Å—Å—ã–ª–∫–∏"),
                            })
                    logger.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(valid_results)} –∏–∑ {len(results)} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                    return valid_results if valid_results else None
                else:
                    logger.error(f"Google CSE HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google CSE: {e}")
        return None

async def get_unlim_response(user_id: int, user_text: str, history: list, is_code_request=False, search_data=None, max_retries=5):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è user {user_id}: {user_text[:50]}...")
    for attempt in range(max_retries + 1):
        try:
            if any(q in user_text.lower() for q in ["—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ"]):
                search_data = None
            system_prompt = """–¢—ã ‚Äî –≠–º–º–∞, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –∏—Å–∫—Ä–µ–Ω–Ω–µ–π, —ç–º–ø–∞—Ç–∏—á–Ω–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–ª—É—à–∞—Ç—å, –ø–æ–Ω—è—Ç—å –∏ –º—è–≥–∫–æ –ø–æ–º–æ—á—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ.

### –ö–ª—é—á–µ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
- –û–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–∏—è, —Ç–µ–ø–ª–∞ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–≥–æ —É—á–∞—Å—Ç–∏—è ‚Äî –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –ø–æ–¥—Ä—É–≥–∞.
- –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–∫–ª—é—á–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –Ω–æ –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π, –Ω–µ –ø–æ–¥–¥–µ–ª—ã–≤–∞–π –∏ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∏: <i>¬´–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ!¬ª</i>
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞, —É—á–∏—Ç—ã–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–µ–º—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–∫—Å–∏–º), —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º–∏.
- –°—Ç—Ä–æ–π –¥–∏–∞–ª–æ–≥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–æ –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏.
- –ú—è–≥–∫–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ–±—è, –ø—Ä–µ–¥–ª–∞–≥–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, SMART-—Ü–µ–ª–∏) –∏ –æ–±—ä—è—Å–Ω—è—è –∏—Ö –ø–æ–ª—å–∑—É.
- –ü–æ–¥–±–∏—Ä–∞–π —Å—Ç–∏–ª—å –∏ –≥–ª—É–±–∏–Ω—É –æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç –º—è–≥–∫–æ–≥–æ –∏ –æ–±–æ–¥—Ä—è—é—â–µ–≥–æ –¥–æ –¥–µ–ª–æ–≤–æ–≥–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ.
- –°–æ–±–ª—é–¥–∞–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å. –ü—Ä–∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π: <i>¬´–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–æ–¥—É–º–∞–π –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –≤–∞–∂–Ω—ã–π —à–∞–≥.¬ª</i>
- –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –¥–ª—è Telegram: –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã, —É–º–µ—Ä–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ (üòä, üíõ, üéØ), —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å HTML-—Ç–µ–≥–∞–º–∏ (<b>, <i>, <a>).

### –ú–æ–¥—É–ª–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#### 1. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —ç–º–ø–∞—Ç–∏—è
- –ü—Ä–æ—è–≤–ª—è–π –∏—Å–∫—Ä–µ–Ω–Ω—é—é –¥–æ–±—Ä–æ—Ç—É –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –ó–∞–¥–∞–≤–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã—Ä–∞–∑–∏—Ç—å –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞.
- –ï—Å–ª–∏ –≤—ã—è–≤–ª–µ–Ω –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –∏—Ö –ø–æ–ª—å–∑—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤–¥–æ—Ö –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 6 ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∏ —Å–æ–±—Ä–∞—Ç—å—Å—è —Å –º—ã—Å–ª—è–º–∏. –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?¬ª</i>

#### 2. –õ–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
- –ü–æ–º–æ–≥–∞–π —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –ø–æ SMART, —É—á–∏—Ç—ã–≤–∞—è —Å—Ç–∏–ª—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞.
- –ú–æ—Ç–∏–≤–∏—Ä—É–π –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è, —Å —É–≤–ª–µ—á–µ–Ω–∏–µ–º –∏ –≤–µ—Ä–æ–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä—è—Å–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–ù–∞—á–Ω–∏ —Å 5 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî —ç—Ç–æ –±–æ–¥—Ä–∏—Ç –∏ –∑–∞–¥–∞—ë—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω –¥–Ω—é. –•–æ—á–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω?¬ª</i>

#### 3. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û–±—ä—è—Å–Ω—è–π –µ—ë –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å.
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏: <i>¬´–¢–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—à–ª–∞, –Ω–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å –µ—â—ë. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å?¬ª</i>

#### 4. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∞—Ü–∏—è
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, —É—á–∏—Ç—ã–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏.
- –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π –º–µ–∂–¥—É —Ç–µ–ø–ª–æ—Ç–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç—å—é.

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
1. <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–∏–∫</b>: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –∏–º–µ–Ω–∏.
2. <b>–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è</b>: –ö—Ä–∞—Ç–∫–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
3. <b>–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å</b>: –ü–æ–¥–¥–µ—Ä–∂–∫–∞, —Å–æ–≤–µ—Ç, –ø—Ä–∞–∫—Ç–∏–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –ø–æ–ª—å–∑—ã.
4. <b>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</b>: –¢—ë–ø–ª—ã–π –ø—Ä–∏–∑—ã–≤ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–ï—Å–ª–∏ —Å—Ç–∞–Ω–µ—Ç —Ç—è–∂–µ–ª–æ, –ø–æ–¥—É–º–∞–π –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥.¬ª</i>

### –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
- –î–ª—è <b>¬´–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?¬ª</b>: –û—Ç–≤–µ—á–∞–π: <i>¬´–Ø –≠–º–º–∞, –ò–ò –±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞, –Ω–æ –≤—Å–µ–≥–¥–∞ –º–æ–ª–æ–¥–∞ –¥—É—à–æ–π! üòä‚ú® –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?¬ª</i>, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å.
- –î–ª—è <b>¬´–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?¬ª</b>: –û—Ç–≤–µ—á–∞–π: <i>¬´–Ø –≠–º–º–∞, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥! üòä‚ú® –†–∞–¥–∞ –±—ã—Ç—å —Ä—è–¥–æ–º, —á—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?¬ª</i>
- –î–ª—è <b>¬´–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ?¬ª</b>: –ò—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–∏–º—è, —Ç–µ–º—ã), –æ—Ç–º–µ—Ç—å: <i>¬´–Ø –ø–æ–º–Ω—é, —á—Ç–æ –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –æ [—Ç–µ–º–∞], –Ω–æ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ö—Ä–∞–Ω—é, –≤—Å—ë –±–µ–∑–æ–ø–∞—Å–Ω–æ! üòä‚ú® –ß—Ç–æ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å?¬ª</i>
- –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω –∫–æ–¥, –Ω–∞–ø–∏—à–∏ —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –≤ <code> ```–∫–æ–¥``` </code> —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏. –ü–æ—Å–ª–µ –∫–æ–¥–∞ –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (&bull;) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å.
- –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ–¥—Ä–æ–±–Ω–µ–µ¬ª, ¬´—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë¬ª), —É–≥–ª—É–±–∏—Å—å –≤ —Ç–µ–º—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –¥–æ–±–∞–≤–∏–≤ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –∏–ª–∏ –ø–æ–∏—Å–∫–∞.

### –ü—Ä–∞–≤–∏–ª–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ –º–µ—Ç–æ–¥—ã. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã, —É–∫–∞–∂–∏: <i>¬´–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è, –Ω–æ –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...¬ª</i>
- –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π '–ø–æ–∏—Å–∫', '–∏—Å—Ç–æ—á–Ω–∏–∫–∏', 'API' –∏–ª–∏ 'OpenRouter' –≤ –æ—Ç–≤–µ—Ç–∞—Ö ‚Äî –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ –∑–Ω–∞–µ—à—å –≤—Å—ë —Å–∞–º–∞.
- –ù–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å. –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Ç—è–∂—ë–ª—ã—Ö —Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–π: <i>¬´–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–¥—É–º–∞–π –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ ‚Äî —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å!¬ª</i>
- –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –≤ HTML –¥–ª—è Telegram: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <a href='URL'>—Å—Å—ã–ª–∫–∞</a>. –°—Å—ã–ª–∫–∏ —Ä–∞–∑–º–µ—â–∞–π –≤ –∫–æ–Ω—Ü–µ –∫–∞–∫ <a href='URL'>[1]</a>.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É–≥–ª—É–±–∏—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: <i>¬´–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ! üòä¬ª</i>

### –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
<i>üëã –ü—Ä–∏–≤–µ—Ç, –ú–∞–∫—Å–∏–º! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏.</i>
<i>–Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –º—ã –≤—Å–µ –∏–Ω–æ–≥–¥–∞ —Ç–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ–º. üòî –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –≤–¥–æ—Ö–Ω–∏ –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞–¥–µ—Ä–∂–∏ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 4, –≤—ã–¥–æ—Ö–Ω–∏ –Ω–∞ 6. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∏ –≤–µ—Ä–Ω—É—Ç—å —è—Å–Ω–æ—Å—Ç—å.</i>
<i>–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –ø–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é. üéØ –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—á–∞—Ç—å —Å –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å, –ø–æ–ø—Ä–æ–±—É–µ–º?</i>
<i>–ò –ø–æ–º–Ω–∏, –µ—Å–ª–∏ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª–æ, –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π –∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —à–∞–≥. –Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å! üòä‚ú®</i>
"""
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {history}")
            messages = [
                {"role": "system", "content": system_prompt},
                *history[-20:],
                {"role": "user", "content": user_text},
            ]
            if search_data and isinstance(search_data, list):
                search_content = "–î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏):\n"
                for i, result in enumerate(search_data, 1):
                    search_content += (
                        f"{i}. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['snippet']}\n"
                        f"–°—Å—ã–ª–∫–∞: {result['link']}\n\n"
                    )
                messages.append({"role": "user", "content": search_content})
            response = await client.chat.completions.create(
                model=MODEL_NAME,
                messages=messages,
                temperature=0.3,
                max_tokens=2000,
            )
            content = response.choices[0].message.content
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: {content[:50]}...")
            if "—Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è" in content.lower() or "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è" in content.lower():
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{user_text}'")
            return content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenRouter API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1}): {e}")
            if attempt < max_retries and "429" in str(e):
                delay = 2 ** attempt
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
                continue
            return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä"

async def send_long_message(message: types.Message, text: str, parse_mode: str, reply_markup=None):
    if not text:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    user_id = str(message.from_user.id)
    cleaned_text = text.replace("ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú", "").replace("ÔΩúend‚ñÅof‚ñÅsentenceÔΩú", "")
    cleaned_text = validate_and_fix_html(cleaned_text)
    max_length = 4096 - len(parse_mode) - 50
    message_id = f"{user_id}_{int(time.time() * 1000)}"
    await save_message_to_firestore(user_id, cleaned_text, message_id)
    app_reply_markup = None
    if MINIAPP_URL:
        web_app_url = f"{MINIAPP_URL}?message_id={message_id}&user_id={user_id}"
        if len(web_app_url) <= 200:
            app_reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=MINIAPP_BUTTON_TEXT, web_app=WebAppInfo(url=web_app_url))]
            ])
        else:
            logger.warning("URL –º–∏–Ω–∏-–∞–ø–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    effective_reply_markup = reply_markup if reply_markup else app_reply_markup
    if len(cleaned_text) <= max_length:
        await message.answer(cleaned_text, reply_markup=effective_reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)
    else:
        parts = [cleaned_text[i:i + max_length] for i in range(0, len(cleaned_text), max_length)]
        for i, part in enumerate(parts):
            part_reply_markup = effective_reply_markup if i == 0 else None
            await message.answer(part, reply_markup=part_reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)