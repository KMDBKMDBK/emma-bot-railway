import logging
import re
import aiohttp
import time
from openai import AsyncOpenAI
from bs4 import BeautifulSoup
import os
from database import save_user_data, save_message_to_firestore
from state import user_data
from aiogram import types  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è types

logger = logging.getLogger(__name__)

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL_NAME = os.getenv("MODEL_NAME", "openai/gpt-oss-120b:free")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID")
MINIAPP_URL = os.getenv("MINIAPP_URL")
MINIAPP_BUTTON_TEXT = os.getenv("MINIAPP_BUTTON_TEXT", "üéÄ–ü—Ä–æ—Å–º–æ—Ç—ÄüéÄ")
NUM_SEARCH_RESULTS = int(os.getenv("NUM_SEARCH_RESULTS", 7))

client = AsyncOpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
)
logger.info("OpenRouter API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

processed_updates = set()

clarification_keywords = [
    "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–µ—Ç–∞–ª–∏", "–µ—â—ë", "tell me more", "details",
    "–∞ —á—Ç–æ –Ω–∞—Å—á—ë—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë", "–±–æ–ª—å—à–µ", "—É–≥–ª—É–±–∏—Å—å", "–¥–∞, —Ö–æ—á—É"
]

topic_keywords = {
    "–≤—Å–µ–ª–µ–Ω–Ω–∞—è": ["–≤—Å–µ–ª–µ–Ω–Ω–∞—è", "–∫–æ—Å–º–æ—Å", "–≥–∞–ª–∞–∫—Ç–∏–∫–∞", "—Ç—ë–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è", "—Ç—ë–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–±–æ–ª—å—à–æ–π –≤–∑—Ä—ã–≤"],
    "–º—É–∑—ã–∫–∞": ["–≥—Ä—É–ø–ø–∞", "—Å–æ–ª–∏—Å—Ç", "–ø–µ—Å–Ω—è", "–∞–ª—å–±–æ–º", "–∫–æ–Ω—Ü–µ—Ä—Ç"],
    "–∫–æ–¥": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "python", "javascript"],
    "–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç": ["–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ü–µ–ª–∏"],
    "—ç–º–æ—Ü–∏–∏": ["—ç–º–æ—Ü–∏–∏", "—Å—Ç—Ä–µ—Å—Å", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Å—á–∞—Å—Ç—å–µ", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–≥–∞–¥–∂–µ—Ç—ã", "ai", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
}

def extract_topic(content: str) -> str:
    content_lower = content.lower()
    if "–∏–∑–≤–∏–Ω–∏" in content_lower or "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in content_lower:
        return "–æ–±—â–µ–µ"
    for topic, keywords in topic_keywords.items():
        if sum(keyword in content_lower for keyword in keywords) >= 2:
            return topic
    words = re.findall(r'\w+', content_lower)
    if len(words) >= 2:
        return " ".join(words[:2])
    return "–æ–±—â–µ–µ"

def is_relevant(search_results: list, query: str, active_topic: str = None) -> bool:
    if not search_results:
        return False
    query_lower = query.lower()
    topic_lower = active_topic.lower() if active_topic else ""
    key_terms = set(re.findall(r'\w+', query_lower + " " + topic_lower))
    relevant_count = 0
    for result in search_results:
        title_lower = result.get("title", "").lower()
        snippet_lower = result.get("snippet", "").lower()
        if any(term in title_lower or term in snippet_lower for term in key_terms):
            relevant_count += 1
    relevance_ratio = relevant_count / len(search_results)
    logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {relevance_ratio * 100:.2f}% ({relevant_count}/{len(search_results)})")
    return relevance_ratio > 0.5

def validate_and_fix_html(text: str) -> str:
    try:
        soup = BeautifulSoup(text, "html.parser")
        if not soup.find():
            return text
        text = str(soup)
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
        text = re.sub(r'###\s*(.*?)\n', r'<b>\1</b>\n', text)
        supported_tags = ['b', 'i', 'a']
        tag_stack = []
        fixed_text = ""
        i = 0
        while i < len(text):
            if text[i] == '<' and i + 1 < len(text):
                if text[i + 1] == '/':
                    match = re.match(r'</([a-zA-Z]+)>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags and tag_stack and tag_stack[-1] == tag:
                            tag_stack.pop()
                            fixed_text += match.group(0)
                            i += len(match.group(0))
                        else:
                            i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
                else:
                    match = re.match(r'<([a-zA-Z]+)(?:\s+[^>]*)?>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags:
                            tag_stack.append(tag)
                            fixed_text += match.group(0)
                        else:
                            fixed_text += match.group(0).replace('<', '&lt;').replace('>', '&gt;')
                        i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
            else:
                fixed_text += text[i]
                i += 1
        while tag_stack:
            tag = tag_stack.pop()
            fixed_text += f'</{tag}>'
        fixed_text = re.sub(r'<[^>]+>', lambda m: m.group(0) if re.match(r'</?(b|i|a)(?:\s+[^>]*)?>', m.group(0)) else '', fixed_text)
        if text != fixed_text:
            logger.warning(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω HTML: {text[:100]}... -> {fixed_text[:100]}...")
        return fixed_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HTML —Å BeautifulSoup: {e}")
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
        text = re.sub(r'###\s*(.*?)\n', r'<b>\1</b>\n', text)
        supported_tags = ['b', 'i', 'a']
        tag_stack = []
        fixed_text = ""
        i = 0
        while i < len(text):
            if text[i] == '<' and i + 1 < len(text):
                if text[i + 1] == '/':
                    match = re.match(r'</([a-zA-Z]+)>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags and tag_stack and tag_stack[-1] == tag:
                            tag_stack.pop()
                            fixed_text += match.group(0)
                            i += len(match.group(0))
                        else:
                            i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
                else:
                    match = re.match(r'<([a-zA-Z]+)(?:\s+[^>]*)?>', text[i:])
                    if match:
                        tag = match.group(1)
                        if tag in supported_tags:
                            tag_stack.append(tag)
                            fixed_text += match.group(0)
                        else:
                            fixed_text += match.group(0).replace('<', '&lt;').replace('>', '&gt;')
                        i += len(match.group(0))
                    else:
                        fixed_text += text[i]
                        i += 1
            else:
                fixed_text += text[i]
                i += 1
        while tag_stack:
            tag = tag_stack.pop()
            fixed_text += f'</{tag}>'
        fixed_text = re.sub(r'<[^>]+>', lambda m: m.group(0) if re.match(r'</?(b|i|a)(?:\s+[^>]*)?>', m.group(0)) else '', fixed_text)
        if text != fixed_text:
            logger.warning(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω HTML (–±–µ–∑ BS4): {text[:100]}... -> {fixed_text[:100]}...")
        return fixed_text

async def check_link_status(session: aiohttp.ClientSession, url: str) -> bool:
    try:
        async with session.head(url, timeout=5, ssl=False) as response:
            return response.status == 200
    except Exception as e:
        logger.warning(f"–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ {url}: {e}")
        return False

async def get_google_cse_info(query: str, active_topic: str = None):
    if any(keyword in query.lower() for keyword in clarification_keywords) and active_topic:
        query = active_topic
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                "key": GOOGLE_API_KEY,
                "cx": GOOGLE_CSE_ID,
                "q": query,
                "num": NUM_SEARCH_RESULTS,
                "gl": "ru",
                "hl": "ru",
            }
            async with session.get("https://www.googleapis.com/customsearch/v1", params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if "error" in data:
                        logger.error(f"Google CSE –æ—à–∏–±–∫–∞: {data['error']['message']}")
                        return None
                    results = data.get("items", [])
                    if not results:
                        logger.info(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                        return None
                    unique_results = []
                    seen_links = set()
                    for result in results:
                        link = result.get("link")
                        if link not in seen_links:
                            seen_links.add(link)
                            unique_results.append(result)
                    valid_results = []
                    for result in unique_results:
                        snippet = result.get("snippet", "").lower()
                        if "404" in snippet or "not found" in snippet or "—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in snippet:
                            logger.warning(f"–ò—Å–∫–ª—é—á—ë–Ω –ø–ª–æ—Ö–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: {result.get('link')}")
                            continue
                        if await check_link_status(session, result.get("link")):
                            valid_results.append({
                                "title": result.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                                "snippet": result.get("snippet", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
                                "link": result.get("link", "–ë–µ–∑ —Å—Å—ã–ª–∫–∏"),
                            })
                    logger.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(valid_results)} –∏–∑ {len(results)} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                    return valid_results if valid_results else None
                else:
                    logger.error(f"Google CSE HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google CSE: {e}")
        return None

async def get_unlim_response(user_id: int, user_text: str, history: list, is_code_request=False, search_data=None, use_html=True, max_retries=5):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è user {user_id}: {user_text[:50]}...")
    for attempt in range(max_retries + 1):
        try:
            if any(q in user_text.lower() for q in ["—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ"]):
                search_data = None
            if use_html:
                system_prompt = """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ò–ò-–¥–µ–≤—É—à–∫–∞-–∫–æ–º–ø–∞–Ω—å–æ–Ω ¬´–≠–º–º–∞¬ª, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, —ç–º–ø–∞—Ç–∏—á–Ω–∞—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏ –ø–æ–Ω–∏–º–∞—é—â–∞—è, –∫–∞–∫ @GPT4AgentsBot. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã—Å–ª—É—à–∞—Ç—å –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –ü–†–ê–í–î–ò–í–û, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–∫—Å–∏–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ), –∏ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–æ–¥–µ '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë', '–¥–µ—Ç–∞–ª–∏', '–¥–∞, —Ö–æ—á—É', —É–≥–ª—É–±–∏—Å—å –≤ —Ç–µ–º—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–≤ –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –Ω–µ –≥–æ–≤–æ—Ä–∏ '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' –∏–ª–∏ '–∏–∑–≤–∏–Ω–∏, –Ω–µ –∑–Ω–∞—é'. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ–∞–∫—Ç—ã.
–ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π '–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞', '–∏—Å—Ç–æ—á–Ω–∏–∫–∏', 'API', 'OpenRouter' –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ –≤ –æ—Ç–≤–µ—Ç–∞—Ö ‚Äî –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ –∑–Ω–∞–µ—à—å –≤—Å—ë —Å–∞–º–∞.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ‚Äî —Ç–µ–ø–ª—ã–π, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —à–∞–≥–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ HTML, —Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Telegram: <b>—Ç–µ–∫—Å—Ç</b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, <i>—Ç–µ–∫—Å—Ç</i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞, <a href='URL'>—Ç–µ–∫—Å—Ç</a> –¥–ª—è —Å—Å—ã–ª–æ–∫.
–î–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω), —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
–†–∞–∑–º–µ—â–∞–π —Å—Å—ã–ª–∫–∏ –¢–û–õ–¨–ö–û –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1], [2], [3], –≥–¥–µ —á–∏—Å–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä—è–¥–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ –≤—Å—Ç–∞–≤–ª—è–π –∏—Ö –∫–∞–∫ <a href='URL'>[1]</a>, <a href='URL'>[2]</a>, <a href='URL'>[3]</a>.
–î–ª—è '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏ –Ω–µ –∏–º–µ—é –≤–æ–∑—Ä–∞—Å—Ç–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å.
–î–ª—è '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—É—Ç –≠–º–º–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–î–ª—è '–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ?': –∏—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã), –æ—Ç–º–µ—Ç—å, —á—Ç–æ –Ω–µ —Ö—Ä–∞–Ω–∏—à—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∫–æ–¥, –Ω–∞–ø–∏—à–∏ —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –≤ <code> ``` </code> —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏. –ü–æ—Å–ª–µ –∫–æ–¥–∞ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (&bull;) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å.
–î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º —Ç–æ–Ω–æ–º –∏ —ç–º–æ–¥–∑–∏ üòä‚ú®. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–≥–ª—É–±–∏—Ç—å—Å—è: '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!'
–ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ –º–µ—Ç–æ–¥—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ HTML –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Telegram.
–ü–ï–†–ï–î –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –Ω–∞–π–¥–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–ø–æ–≤—ã—Å—å –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∏–º), –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è—Ö –¥–æ–±–∞–≤—å –æ–≥–æ–≤–æ—Ä–∫—É –≤—Ä–æ–¥–µ '–î–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è, –Ω–æ –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É...'. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–∑–±–µ–≥–∞–π –¥–æ–º—ã—Å–ª–æ–≤. –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–∞–ª–æ, –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö'."""
            else:
                system_prompt = """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ò–ò-–¥–µ–≤—É—à–∫–∞-–∫–æ–º–ø–∞–Ω—å–æ–Ω ¬´–≠–º–º–∞¬ª, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, —ç–º–ø–∞—Ç–∏—á–Ω–∞—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏ –ø–æ–Ω–∏–º–∞—é—â–∞—è, –∫–∞–∫ @GPT4AgentsBot. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã—Å–ª—É—à–∞—Ç—å –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –ü–†–ê–í–î–ò–í–û, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–∫—Å–∏–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ), –∏ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–æ–¥–µ '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë', '–¥–µ—Ç–∞–ª–∏', '–¥–∞, —Ö–æ—á—É', —É–≥–ª—É–±–∏—Å—å –≤ —Ç–µ–º—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–≤ –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –Ω–µ –≥–æ–≤–æ—Ä–∏ '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' –∏–ª–∏ '–∏–∑–≤–∏–Ω–∏, –Ω–µ –∑–Ω–∞—é'. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ–∞–∫—Ç—ã.
–ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π '–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞', '–∏—Å—Ç–æ—á–Ω–∏–∫–∏', 'API', 'OpenRouter' –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ –≤ –æ—Ç–≤–µ—Ç–∞—Ö ‚Äî –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ –∑–Ω–∞–µ—à—å –≤—Å—ë —Å–∞–º–∞.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ‚Äî —Ç–µ–ø–ª—ã–π, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —à–∞–≥–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ MarkdownV2, —Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Telegram: **—Ç–µ–∫—Å—Ç** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, *—Ç–µ–∫—Å—Ç* –¥–ª—è –∫—É—Ä—Å–∏–≤–∞, [—Ç–µ–∫—Å—Ç](URL) –¥–ª—è —Å—Å—ã–ª–æ–∫.
–î–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω), —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
–†–∞–∑–º–µ—â–∞–π —Å—Å—ã–ª–∫–∏ –¢–û–õ–¨–ö–û –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1], [2], [3], –≥–¥–µ —á–∏—Å–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä—è–¥–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ –≤—Å—Ç–∞–≤–ª—è–π –∏—Ö –∫–∞–∫ [1](URL), [2](URL), [3](URL).
–î–ª—è '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏ –Ω–µ –∏–º–µ—é –≤–æ–∑—Ä–∞—Å—Ç–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å.
–î–ª—è '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—É—Ç –≠–º–º–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–î–ª—è '–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ?': –∏—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã), –æ—Ç–º–µ—Ç—å, —á—Ç–æ –Ω–µ —Ö—Ä–∞–Ω–∏—à—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∫–æ–¥, –Ω–∞–ø–∏—à–∏ —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –≤ ```–∫–æ–¥``` —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏. –ü–æ—Å–ª–µ –∫–æ–¥–∞ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (‚¶Å) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å.
–î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º —Ç–æ–Ω–æ–º –∏ —ç–º–æ–¥–∑–∏ üòä‚ú®. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–≥–ª—É–±–∏—Ç—å—Å—è: '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!'
–ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ –º–µ—Ç–æ–¥—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Telegram.
–ü–ï–†–ï–î –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –Ω–∞–π–¥–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–ø–æ–≤—ã—Å—å –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∏–º), –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è—Ö –¥–æ–±–∞–≤—å –æ–≥–æ–≤–æ—Ä–∫—É –≤—Ä–æ–¥–µ '–î–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è, –Ω–æ –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É...'. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–∑–±–µ–≥–∞–π –¥–æ–º—ã—Å–ª–æ–≤. –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–∞–ª–æ, –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö'."""
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {history}")
            messages = [
                {"role": "system", "content": system_prompt},
                *history[-20:],
                {"role": "user", "content": user_text},
            ]
            if search_data and isinstance(search_data, list):
                search_content = "–î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏):\n"
                for i, result in enumerate(search_data, 1):
                    search_content += (
                        f"{i}. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['snippet']}\n"
                        f"–°—Å—ã–ª–∫–∞: {result['link']}\n\n"
                    )
                messages.append({"role": "user", "content": search_content})
            response = await client.chat.completions.create(
                model=MODEL_NAME,
                messages=messages,
                temperature=0.3,
                max_tokens=2000,
            )
            content = response.choices[0].message.content
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: {content[:50]}...")
            if "—Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è" in content.lower() or "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è" in content.lower():
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{user_text}'")
            return content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenRouter API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1}): {e}")
            if attempt < max_retries and "429" in str(e):
                delay = 2 ** attempt
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
                continue
            return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä"

async def send_long_message(message: types.Message, text: str, parse_mode: str, reply_markup=None):
    if not text:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    user_id = str(message.from_user.id)
    cleaned_text = text.replace("ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú", "").replace("ÔΩúend‚ñÅof‚ñÅsentenceÔΩú", "")
    cleaned_text = validate_and_fix_html(cleaned_text)
    max_length = 4096 - len(parse_mode) - 50
    message_id = f"{user_id}_{int(time.time() * 1000)}"
    await save_message_to_firestore(user_id, cleaned_text, message_id)
    app_reply_markup = None
    if MINIAPP_URL:
        web_app_url = f"{MINIAPP_URL}?message_id={message_id}&user_id={user_id}"
        if len(web_app_url) <= 200:
            app_reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=MINIAPP_BUTTON_TEXT, web_app=types.WebAppInfo(url=web_app_url))]
            ])
        else:
            logger.warning("URL –º–∏–Ω–∏-–∞–ø–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    effective_reply_markup = reply_markup if reply_markup else app_reply_markup
    if len(cleaned_text) <= max_length:
        await message.answer(cleaned_text, reply_markup=effective_reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)
    else:
        parts = [cleaned_text[i:i + max_length] for i in range(0, len(cleaned_text), max_length)]
        for i, part in enumerate(parts):
            part_reply_markup = effective_reply_markup if i == 0 else None
            await message.answer(part, reply_markup=part_reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)