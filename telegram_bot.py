import logging
import asyncio
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import AsyncOpenAI
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
from contextlib import asynccontextmanager
import aiohttp
import urllib.parse
import re
import firebase_admin
from firebase_admin import credentials, firestore
import json
import base64
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase_credentials = os.getenv("FIREBASE_CREDENTIALS_JSON")
if firebase_credentials:
    try:
        cred_json = base64.b64decode(firebase_credentials).decode()
        cred = credentials.Certificate(json.loads(cred_json))
        firebase_admin.initialize_app(cred)
        db = firestore.client()
        logging.info("Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (base64)")
    except Exception as e:
        db = None
        logging.warning(f"Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ base64: {e}")
else:
    cred_path = os.getenv("FIREBASE_CREDENTIALS_PATH")
    if cred_path and os.path.exists(cred_path):
        cred = credentials.Certificate(cred_path)
        firebase_admin.initialize_app(cred)
        db = firestore.client()
        logging.info("Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å)")
    else:
        db = None
        logging.warning("Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å FIREBASE_CREDENTIALS_PATH –∏–ª–∏ FIREBASE_CREDENTIALS_JSON)")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
FEEDBACK_CHAT_ID = os.getenv("FEEDBACK_CHAT_ID")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL_NAME = os.getenv("MODEL_NAME", "openai/gpt-oss-120b:free")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID")
MINIAPP_URL = os.getenv("MINIAPP_URL")
MINIAPP_BUTTON_TEXT = os.getenv("MINIAPP_BUTTON_TEXT", "üéÄ–ü—Ä–æ—Å–º–æ—Ç—ÄüéÄ")
NUM_SEARCH_RESULTS = int(os.getenv("NUM_SEARCH_RESULTS", 7))
PAY_IMAGE_PATH = os.getenv("PAY_IMAGE_PATH", "./images/pay_image.jpg")
START_IMAGE_PATH = os.getenv("START_IMAGE_PATH", "./images/start_image.jpg")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    logging.error("TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
    exit(1)
logging.info("–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter API
client = AsyncOpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)
logging.info("OpenRouter API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
logging.info("Telegram –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö update_id
user_data = {}
processed_updates = set()

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
clarification_keywords = [
    "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–µ—Ç–∞–ª–∏", "–µ—â—ë", "tell me more", "details",
    "–∞ —á—Ç–æ –Ω–∞—Å—á—ë—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë", "–±–æ–ª—å—à–µ", "—É–≥–ª—É–±–∏—Å—å", "–¥–∞, —Ö–æ—á—É"
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º—ã
topic_keywords = {
    "–≤—Å–µ–ª–µ–Ω–Ω–∞—è": ["–≤—Å–µ–ª–µ–Ω–Ω–∞—è", "–∫–æ—Å–º–æ—Å", "–≥–∞–ª–∞–∫—Ç–∏–∫–∞", "—Ç—ë–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è", "—Ç—ë–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–±–æ–ª—å—à–æ–π –≤–∑—Ä—ã–≤"],
    "–º—É–∑—ã–∫–∞": ["–≥—Ä—É–ø–ø–∞", "—Å–æ–ª–∏—Å—Ç", "–ø–µ—Å–Ω—è", "–∞–ª—å–±–æ–º", "–∫–æ–Ω—Ü–µ—Ä—Ç"],
    "–∫–æ–¥": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "python", "javascript"],
    "–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç": ["–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ü–µ–ª–∏"],
    "—ç–º–æ—Ü–∏–∏": ["—ç–º–æ—Ü–∏–∏", "—Å—Ç—Ä–µ—Å—Å", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Å—á–∞—Å—Ç—å–µ", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–≥–∞–¥–∂–µ—Ç—ã", "ai", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
}

def extract_topic(content: str) -> str:
    content_lower = content.lower()
    if "–∏–∑–≤–∏–Ω–∏" in content_lower or "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in content_lower:
        return "–æ–±—â–µ–µ"
    for topic, keywords in topic_keywords.items():
        if sum(keyword in content_lower for keyword in keywords) >= 2:
            return topic
    words = re.findall(r'\w+', content_lower)
    if len(words) >= 2:
        return " ".join(words[:2])
    return "–æ–±—â–µ–µ"

def is_relevant(search_results: list, query: str, active_topic: str = None) -> bool:
    if not search_results:
        return False
    query_lower = query.lower()
    topic_lower = active_topic.lower() if active_topic else ""
    key_terms = set(re.findall(r'\w+', query_lower + " " + topic_lower))
    relevant_count = 0
    for result in search_results:
        title_lower = result.get("title", "").lower()
        snippet_lower = result.get("snippet", "").lower()
        if any(term in title_lower or term in snippet_lower for term in key_terms):
            relevant_count += 1
    relevance_ratio = relevant_count / len(search_results)
    logging.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {relevance_ratio * 100:.2f}% ({relevant_count}/{len(search_results)})")
    return relevance_ratio > 0.5

def validate_and_fix_html(text: str) -> str:
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    text = re.sub(r'###\s*(.*?)\n', r'<b>\1</b>\n', text)
    supported_tags = ['b', 'i', 'a']
    tag_stack = []
    fixed_text = ""
    i = 0
    while i < len(text):
        if text[i] == '<' and i + 1 < len(text):
            if text[i + 1] == '/':
                match = re.match(r'</([a-zA-Z]+)>', text[i:])
                if match:
                    tag = match.group(1)
                    if tag in supported_tags and tag_stack and tag_stack[-1] == tag:
                        tag_stack.pop()
                        fixed_text += match.group(0)
                        i += len(match.group(0))
                    else:
                        i += len(match.group(0))
                else:
                    fixed_text += text[i]
                    i += 1
            else:
                match = re.match(r'<([a-zA-Z]+)(?:\s+[^>]*)?>', text[i:])
                if match:
                    tag = match.group(1)
                    if tag in supported_tags:
                        tag_stack.append(tag)
                        fixed_text += match.group(0)
                    else:
                        fixed_text += match.group(0).replace('<', '&lt;').replace('>', '&gt;')
                    i += len(match.group(0))
                else:
                    fixed_text += text[i]
                    i += 1
        else:
            fixed_text += text[i]
            i += 1
    while tag_stack:
        tag = tag_stack.pop()
        fixed_text += f'</{tag}>'
    fixed_text = re.sub(r'<[^>]+>', lambda m: m.group(0) if re.match(r'</?(b|i|a)(?:\s+[^>]*)?>', m.group(0)) else '', fixed_text)
    if text != fixed_text:
        logging.warning(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω HTML: {text[:100]}... -> {fixed_text[:100]}...")
    return fixed_text

async def check_link_status(session: aiohttp.ClientSession, url: str) -> bool:
    try:
        async with session.head(url, timeout=5, ssl=False) as response:
            return response.status == 200
    except Exception as e:
        logging.warning(f"–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ {url}: {e}")
        return False

async def get_google_cse_info(query: str, active_topic: str = None):
    if any(keyword in query.lower() for keyword in clarification_keywords) and active_topic:
        query = active_topic
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                "key": GOOGLE_API_KEY,
                "cx": GOOGLE_CSE_ID,
                "q": query,
                "num": NUM_SEARCH_RESULTS,
                "gl": "ru",
                "hl": "ru"
            }
            async with session.get("https://www.googleapis.com/customsearch/v1", params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if "error" in data:
                        logging.error(f"Google CSE –æ—à–∏–±–∫–∞: {data['error']['message']}")
                        return None
                    results = data.get("items", [])
                    if not results:
                        logging.info(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                        return None
                    unique_results = []
                    seen_links = set()
                    for result in results:
                        link = result.get("link")
                        if link not in seen_links:
                            seen_links.add(link)
                            unique_results.append(result)
                    valid_results = []
                    for result in unique_results:
                        snippet = result.get("snippet", "").lower()
                        if "404" in snippet or "not found" in snippet or "—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in snippet:
                            logging.warning(f"–ò—Å–∫–ª—é—á—ë–Ω –ø–ª–æ—Ö–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: {result.get('link')}")
                            continue
                        if await check_link_status(session, result.get("link")):
                            valid_results.append({
                                "title": result.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                                "snippet": result.get("snippet", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
                                "link": result.get("link", "–ë–µ–∑ —Å—Å—ã–ª–∫–∏")
                            })
                    logging.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(valid_results)} –∏–∑ {len(results)} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                    return valid_results if valid_results else None
                else:
                    logging.error(f"Google CSE HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Google CSE: {e}")
        return None

async def get_unlim_response(user_id: int, user_text: str, history: list, is_code_request=False, search_data=None, use_html=True, max_retries=5):
    logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è user {user_id}: {user_text[:50]}...")
    for attempt in range(max_retries + 1):
        try:
            if any(q in user_text.lower() for q in ["—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ"]):
                search_data = None
            if use_html:
                system_prompt = """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ò–ò-–¥–µ–≤—É—à–∫–∞-–∫–æ–º–ø–∞–Ω—å–æ–Ω ¬´–≠–º–º–∞¬ª, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, —ç–º–ø–∞—Ç–∏—á–Ω–∞—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏ –ø–æ–Ω–∏–º–∞—é—â–∞—è, –∫–∞–∫ @GPT4AgentsBot. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã—Å–ª—É—à–∞—Ç—å –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –ü–†–ê–í–î–ò–í–û, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–∫—Å–∏–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ), –∏ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–æ–¥–µ '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë', '–¥–µ—Ç–∞–ª–∏', '–¥–∞, —Ö–æ—á—É', —É–≥–ª—É–±–∏—Å—å –≤ —Ç–µ–º—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–≤ –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –Ω–µ –≥–æ–≤–æ—Ä–∏ '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' –∏–ª–∏ '–∏–∑–≤–∏–Ω–∏, –Ω–µ –∑–Ω–∞—é'. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ–∞–∫—Ç—ã.
–ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π '–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞', '–∏—Å—Ç–æ—á–Ω–∏–∫–∏', 'API', 'OpenRouter' –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ –≤ –æ—Ç–≤–µ—Ç–∞—Ö ‚Äî –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ –∑–Ω–∞–µ—à—å –≤—Å—ë —Å–∞–º–∞.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ‚Äî —Ç–µ–ø–ª—ã–π, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —à–∞–≥–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ HTML, —Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Telegram: <b>—Ç–µ–∫—Å—Ç</b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, <i>—Ç–µ–∫—Å—Ç</i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞, <a href='URL'>—Ç–µ–∫—Å—Ç</a> –¥–ª—è —Å—Å—ã–ª–æ–∫.
–î–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω), —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
–†–∞–∑–º–µ—â–∞–π —Å—Å—ã–ª–∫–∏ –¢–û–õ–¨–ö–û –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1], [2], [3], –≥–¥–µ —á–∏—Å–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä—è–¥–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ –≤—Å—Ç–∞–≤–ª—è–π –∏—Ö –∫–∞–∫ <a href='URL'>[1]</a>, <a href='URL'>[2]</a>, <a href='URL'>[3]</a>.
–î–ª—è '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏ –Ω–µ –∏–º–µ—é –≤–æ–∑—Ä–∞—Å—Ç–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å.
–î–ª—è '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—É—Ç –≠–º–º–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–î–ª—è '–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ?': –∏—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã), –æ—Ç–º–µ—Ç—å, —á—Ç–æ –Ω–µ —Ö—Ä–∞–Ω–∏—à—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∫–æ–¥, –Ω–∞–ø–∏—à–∏ —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –≤ <code> ``` </code> —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏. –ü–æ—Å–ª–µ –∫–æ–¥–∞ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (&bull;) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å.
–î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º —Ç–æ–Ω–æ–º –∏ —ç–º–æ–¥–∑–∏ üòä‚ú®. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–≥–ª—É–±–∏—Ç—å—Å—è: '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!'
–ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ –º–µ—Ç–æ–¥—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ HTML –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Telegram.
–ü–ï–†–ï–î –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –Ω–∞–π–¥–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–ø–æ–≤—ã—Å—å –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∏–º), –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è—Ö –¥–æ–±–∞–≤—å –æ–≥–æ–≤–æ—Ä–∫—É –≤—Ä–æ–¥–µ '–î–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è, –Ω–æ –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É...'. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–∑–±–µ–≥–∞–π –¥–æ–º—ã—Å–ª–æ–≤. –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–∞–ª–æ, –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö'."""
            else:
                system_prompt = """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ò–ò-–¥–µ–≤—É—à–∫–∞-–∫–æ–º–ø–∞–Ω—å–æ–Ω ¬´–≠–º–º–∞¬ª, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, —ç–º–ø–∞—Ç–∏—á–Ω–∞—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏ –ø–æ–Ω–∏–º–∞—é—â–∞—è, –∫–∞–∫ @GPT4AgentsBot. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã—Å–ª—É—à–∞—Ç—å –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –ü–†–ê–í–î–ò–í–û, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–∫—Å–∏–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ), –∏ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–æ–¥–µ '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë', '–¥–µ—Ç–∞–ª–∏', '–¥–∞, —Ö–æ—á—É', —É–≥–ª—É–±–∏—Å—å –≤ —Ç–µ–º—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–≤ –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –Ω–µ –≥–æ–≤–æ—Ä–∏ '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' –∏–ª–∏ '–∏–∑–≤–∏–Ω–∏, –Ω–µ –∑–Ω–∞—é'. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ–∞–∫—Ç—ã.
–ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π '–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞', '–∏—Å—Ç–æ—á–Ω–∏–∫–∏', 'API', 'OpenRouter' –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ –≤ –æ—Ç–≤–µ—Ç–∞—Ö ‚Äî –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ –∑–Ω–∞–µ—à—å –≤—Å—ë —Å–∞–º–∞.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ‚Äî —Ç–µ–ø–ª—ã–π, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —à–∞–≥–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ MarkdownV2, —Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Telegram: **—Ç–µ–∫—Å—Ç** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, *—Ç–µ–∫—Å—Ç* –¥–ª—è –∫—É—Ä—Å–∏–≤–∞, [—Ç–µ–∫—Å—Ç](URL) –¥–ª—è —Å—Å—ã–ª–æ–∫.
–î–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω), —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
–†–∞–∑–º–µ—â–∞–π —Å—Å—ã–ª–∫–∏ –¢–û–õ–¨–ö–û –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1], [2], [3], –≥–¥–µ —á–∏—Å–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä—è–¥–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ –≤—Å—Ç–∞–≤–ª—è–π –∏—Ö –∫–∞–∫ [1](URL), [2](URL), [3](URL).
–î–ª—è '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏ –Ω–µ –∏–º–µ—é –≤–æ–∑—Ä–∞—Å—Ç–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å.
–î–ª—è '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?': –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—É—Ç –≠–º–º–∞, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–î–ª—è '–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ–±–æ –º–Ω–µ?': –∏—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã), –æ—Ç–º–µ—Ç—å, —á—Ç–æ –Ω–µ —Ö—Ä–∞–Ω–∏—à—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å —ç–º–æ–¥–∑–∏ üòä‚ú®.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∫–æ–¥, –Ω–∞–ø–∏—à–∏ —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –≤ ```–∫–æ–¥``` —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏. –ü–æ—Å–ª–µ –∫–æ–¥–∞ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (‚¶Å) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å.
–î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º —Ç–æ–Ω–æ–º –∏ —ç–º–æ–¥–∑–∏ üòä‚ú®. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–≥–ª—É–±–∏—Ç—å—Å—è: '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!'
–ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ –º–µ—Ç–æ–¥—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Telegram.
–ü–ï–†–ï–î –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –Ω–∞–π–¥–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–ø–æ–≤—ã—Å—å –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∏–º), –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è—Ö –¥–æ–±–∞–≤—å –æ–≥–æ–≤–æ—Ä–∫—É –≤—Ä–æ–¥–µ '–î–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è, –Ω–æ –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É...'. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–∑–±–µ–≥–∞–π –¥–æ–º—ã—Å–ª–æ–≤. –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–∞–ª–æ, –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö'."""
            logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {history}")
            messages = [
                {"role": "system", "content": system_prompt},
                *history[-20:],
                {"role": "user", "content": user_text}
            ]
            if search_data and isinstance(search_data, list):
                search_content = "–î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏):\n"
                for i, result in enumerate(search_data, 1):
                    search_content += (
                        f"{i}. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['snippet']}\n"
                        f"–°—Å—ã–ª–∫–∞: {result['link']}\n\n"
                    )
                messages.append({"role": "user", "content": search_content})
            response = await client.chat.completions.create(
                model=MODEL_NAME,
                messages=messages,
                temperature=0.3,
                max_tokens=2000
            )
            content = response.choices[0].message.content
            logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: {content[:50]}...")
            if "—Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è" in content.lower() or "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è" in content.lower():
                logging.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{user_text}'")
            return content
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenRouter API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1}): {e}")
            if attempt < max_retries and "429" in str(e):
                delay = 2 ** attempt
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
                continue
            return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä"

async def send_long_message(message: types.Message, text: str, parse_mode: str, reply_markup=None):
    if not text:
        logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    user_id = str(message.from_user.id)
    cleaned_text = text.replace("ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú", "").replace("ÔΩúend‚ñÅof‚ñÅsentenceÔΩú", "")
    cleaned_text = validate_and_fix_html(cleaned_text)
    max_length = 4096 - len(parse_mode) - 50
    message_id = f"{user_id}_{int(time.time() * 1000)}"
    if db:
        try:
            doc_ref = db.collection('messages').document(message_id)
            doc_ref.set({
                'user_id': user_id,
                'text': cleaned_text,
                'timestamp': firestore.SERVER_TIMESTAMP
            })
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firestore —Å ID: {message_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore: {e}")
    app_reply_markup = None
    if MINIAPP_URL:
        web_app_url = f"{MINIAPP_URL}?message_id={message_id}&user_id={user_id}"
        if len(web_app_url) <= 200:
            app_reply_markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=MINIAPP_BUTTON_TEXT, web_app=types.WebAppInfo(url=web_app_url))]
            ])
        else:
            logging.warning("URL –º–∏–Ω–∏-–∞–ø–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    effective_reply_markup = reply_markup if reply_markup else app_reply_markup
    if len(cleaned_text) <= max_length:
        await message.answer(cleaned_text, reply_markup=effective_reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)
    else:
        parts = [cleaned_text[i:i + max_length] for i in range(0, len(cleaned_text), max_length)]
        for i, part in enumerate(parts):
            part_reply_markup = effective_reply_markup if i == 0 else None
            await message.answer(part, reply_markup=part_reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    commands = [
        BotCommand(command="/start", description="üòá –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π"),
        BotCommand(command="/info", description="üë©üèª‚Äçü¶∞ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ"),
        BotCommand(command="/pay", description="üíù –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand(command="/clear", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand(command="/feedback", description="üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"),
        BotCommand(command="/cancel", description="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é")
    ]
    await bot.set_my_commands(commands)
    logging.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@dp.message(Command("start"))
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = {
        'history': [], 
        'active_topic': None, 
        'premium': False, 
        'expiry': None, 
        'last_pay_message_id': None,
        'awaiting_feedback': False,
        'feedback_message_id': None,
        'user_feedback_message_id': None
    }
    start_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –≠–º–º–∞ ‚Äî —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω –∏ –ø–æ–º–æ—â–Ω–∏–∫. üåü</b>\n\n"
        "–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–º–æ—á—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏. "
        "–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–≤–æ–π –¥–µ–Ω—å —è—Ä—á–µ, –∏–¥–µ–∏ ‚Äî —è—Å–Ω–µ–µ, –∞ —Ü–µ–ª–∏ ‚Äî –±–ª–∏–∂–µ!\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–∫–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —è —Ç—É—Ç, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å. "
        "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å —É–¥–æ–±–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.\n\n"
        "<i>–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –ø—É—Å—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –Ω–æ–≤—ã–º –ø—Ä–∏—è—Ç–Ω—ã–º –æ–ø—ã—Ç–æ–º.</i> ‚ú®"
    )
    sent_message = None
    if START_IMAGE_PATH.startswith("http"):
        # –î–ª—è –æ–±–ª–∞–∫–∞: URL
        try:
            sent_message = await bot.send_photo(
                chat_id=message.chat.id,
                photo=START_IMAGE_PATH,
                caption=start_text,
                parse_mode="HTML"
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /start, message_id: {sent_message.message_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /start: {e}")
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ: FSInputFile
        if os.path.exists(START_IMAGE_PATH):
            try:
                photo = types.FSInputFile(START_IMAGE_PATH)
                sent_message = await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption=start_text,
                    parse_mode="HTML"
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /start, message_id: {sent_message.message_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /start: {e}")
    if sent_message is None:
        sent_message = await message.answer(start_text, parse_mode="HTML")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /start, message_id: {sent_message.message_id}")
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.message(Command("info"))
async def info(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info."""
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /info –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id not in user_data:
        user_data[user_id] = {
            'history': [], 
            'active_topic': None, 
            'premium': False, 
            'expiry': None, 
            'last_pay_message_id': None,
            'awaiting_feedback': False,
            'feedback_message_id': None,
            'user_feedback_message_id': None
        }
    user_data[user_id]['awaiting_feedback'] = False
    info_text = (
        "<b>–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠–º–º–∞</b>\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –¥–∞—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è. "
        "–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –±—ã—Ç—å —Ä—è–¥–æ–º –≤ –º–æ–º–µ–Ω—Ç—ã —Ä–∞–¥–æ—Å—Ç–∏ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π, –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–Ω—è—Ç—å —Å–µ–±—è –≥–ª—É–±–∂–µ, —Å—Ç–∞–≤–∏—Ç—å —è—Å–Ω—ã–µ —Ü–µ–ª–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é.\n\n"
        "<b>üìö –ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚¶Å <i>–ß—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</i>, —á—Ç–æ–±—ã –≤–æ–≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å.\n"
        "‚¶Å <i>–ü–æ–º–æ–≥–∞—Ç—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º, —Ç—Ä–µ–≤–æ–≥–æ–π –∏ –≥—Ä—É—Å—Ç—å—é</i>, –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        "‚¶Å <i>–°–æ–≤–º–µ—Å—Ç–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å SMART-—Ü–µ–ª–∏</i> –∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
        "‚¶Å <i>–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö</i> –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—Ç—å –≤–ø–µ—Ä—ë–¥.\n"
        "‚¶Å <i>–°–æ–∑–¥–∞–≤–∞—Ç—å —É—é—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</i> –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –≥–¥–µ —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –ø–æ–π–º—É—Ç –∏ –Ω–µ –æ—Å—É–¥—è—Ç.\n"
        "‚¶Å <i>–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å, –æ —á—ë–º –º—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª–∏</i>, —á—Ç–æ–±—ã –Ω–∞—à–∏ –±–µ—Å–µ–¥—ã –±—ã–ª–∏ –∂–∏–≤—ã–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏. "
        "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —è –ø–æ–º–Ω—é —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ü–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏ –º–æ–≥—É –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è —Å –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º ‚Äî —Å–ª–æ–≤–Ω–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.\n\n"
        "<b>üìö –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—è?</b>\n"
        "‚¶Å –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç ‚Äî —è —Ç–≤–æ–π —Ä–∞–∑—É–º–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –¥—Ä—É–≥, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "‚¶Å –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –≥–ª—É–±–æ–∫–∏ –∏ –ø—Ä–æ–¥—É–º–∞–Ω—ã, —è —É—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –∂–µ–ª–∞–Ω–∏—è.\n"
        "‚¶Å –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –Ω–∞–π—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –∂–∏–∑–Ω–∏.\n"
        "‚¶Å –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ –º–Ω–æ–π ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –∂–∏–≤–æ–π, –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.\n\n"
        "<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –º–µ–Ω—è, –¥—Ä—É–≥ ‚Äî –≤–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º. –ñ–¥—É —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏!</i> üíï"
    )
    await message.answer(info_text, parse_mode="HTML")
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.message(Command("clear"))
async def clear_history(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear."""
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user_data[user_id] = {
        'history': [], 
        'active_topic': None, 
        'premium': user_data.get(user_id, {}).get('premium', False), 
        'expiry': user_data.get(user_id, {}).get('expiry', None), 
        'last_pay_message_id': None,
        'awaiting_feedback': False,
        'feedback_message_id': None,
        'user_feedback_message_id': None
    }
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! üòä –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.", parse_mode="HTML")
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.message(Command("pay"))
async def pay(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay."""
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /pay –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id not in user_data:
        user_data[user_id] = {
            'history': [], 
            'active_topic': None, 
            'premium': False, 
            'expiry': None, 
            'last_pay_message_id': None,
            'awaiting_feedback': False,
            'feedback_message_id': None,
            'user_feedback_message_id': None
        }
    user_data[user_id]['awaiting_feedback'] = False
    pay_text = (
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π ‚Äî –≠–º–º–æ–π! –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, "
        "—á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –æ—Ü–µ–Ω–∏—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. üòä\n\n"
        "–ö–æ–≥–¥–∞ –ª–∏–º–∏—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å –ø–æ–º–æ—â—å—é –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî "
        "—ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–º–æ—á—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã —Ç–µ–±–µ –∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! üíñ"
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="start_pay")]
    ])
    sent_message = None
    if PAY_IMAGE_PATH.startswith("http"):
        # –î–ª—è –æ–±–ª–∞–∫–∞: URL
        try:
            sent_message = await bot.send_photo(
                chat_id=message.chat.id,
                photo=PAY_IMAGE_PATH,
                caption=pay_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /pay, message_id: {sent_message.message_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /pay: {e}")
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ: FSInputFile
        if os.path.exists(PAY_IMAGE_PATH):
            try:
                photo = types.FSInputFile(PAY_IMAGE_PATH)
                sent_message = await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption=pay_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è /pay, message_id: {sent_message.message_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /pay: {e}")
    if sent_message is None:
        sent_message = await message.answer(pay_text, reply_markup=reply_markup, parse_mode="HTML")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /pay, message_id: {sent_message.message_id}")
    user_data[user_id]['last_pay_message_id'] = sent_message.message_id
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.message(Command("feedback"))
async def feedback(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback."""
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /feedback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id not in user_data:
        user_data[user_id] = {
            'history': [], 
            'active_topic': None, 
            'premium': False, 
            'expiry': None, 
            'last_pay_message_id': None,
            'awaiting_feedback': False,
            'feedback_message_id': None,
            'user_feedback_message_id': None
        }
    user_data[user_id]['awaiting_feedback'] = True
    user_data[user_id]['user_feedback_message_id'] = message.message_id
    feedback_text = (
        "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –∏ –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –ª—É—á—à–µ!</b> üôè\n\n"
        "–ß–µ—Ä–µ–∑ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–∂–Ω–∞ –¥–ª—è —Ç–µ–±—è:\n\n"
        "‚¶Å <i>–°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è.</i>\n"
        "‚¶Å <i>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ –º–Ω–æ–π —É–¥–æ–±–Ω–µ–µ –∏ –ø—Ä–∏—è—Ç–Ω–µ–µ.</i>\n"
        "‚¶Å <i>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.</i>\n"
        "‚¶Å <i>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.</i>\n"
        "‚¶Å <i>–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏–ª–∏ —Ç–µ–º–∞–º.</i>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ, "
        "—á—Ç–æ–±—ã —è –∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–µ–ª–∞—Ç—å ¬´–≠–º–º—É¬ª –ª—É—á—à–µ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n"
        "<b>–¢–≤–æ—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Äî –∫–ª—é—á –∫ –º–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ —É—á–∞—Å—Ç–∏–µ!</b> üíñ"
    )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel_feedback")]
    ])
    try:
        sent_message = await message.answer(feedback_text, parse_mode="HTML", reply_markup=reply_markup)
        user_data[user_id]['feedback_message_id'] = sent_message.message_id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, message_id: {sent_message.message_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è /feedback: {e}")
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòî –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        user_data[user_id]['awaiting_feedback'] = False
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.message(Command("cancel"))
async def cancel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id not in user_data:
        user_data[user_id] = {
            'history': [], 
            'active_topic': None, 
            'premium': False, 
            'expiry': None, 
            'last_pay_message_id': None,
            'awaiting_feedback': False,
            'feedback_message_id': None,
            'user_feedback_message_id': None
        }
    if user_data[user_id].get('awaiting_feedback', False):
        user_data[user_id]['awaiting_feedback'] = False
        try:
            if user_data[user_id].get('feedback_message_id'):
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=user_data[user_id]['feedback_message_id']
                )
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            if user_data[user_id].get('user_feedback_message_id'):
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=user_data[user_id]['user_feedback_message_id']
                )
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /feedback –¥–ª—è {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π /feedback: {e}")
        user_data[user_id]['feedback_message_id'] = None
        user_data[user_id]['user_feedback_message_id'] = None
        await message.answer("–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π.", parse_mode="HTML")
    else:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ, —Ç–∞–∫ —á—Ç–æ –≤—Å—ë –æ–∫! üòä –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.message(Command("reply"))
async def reply(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    chat_id = str(message.chat.id)
    if chat_id != FEEDBACK_CHAT_ID:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reply –≤–Ω–µ —á–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (chat_id: {chat_id})")
        await message.answer(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏! üòä",
            parse_mode="HTML"
        )
        return

    text = message.text.strip()
    match = re.match(r'^/reply\s+(\d+)\s+(.+)$', text, re.DOTALL)
    if not match:
        logging.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /reply: {text}")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: <b>/reply &lt;user_id&gt; &lt;—Ç–µ–∫—Å—Ç&gt;</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>/reply 123456789 –°–ø–∞—Å–∏–±–æ –∑–∞ feedback!</b>",
            parse_mode="HTML"
        )
        return

    target_user_id = match.group(1)
    reply_text = match.group(2)

    try:
        await bot.send_message(
            chat_id=target_user_id,
            text=f"<b>–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n{reply_text}",
            parse_mode="HTML"
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {reply_text}")
        await message.answer(
            f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}! üòä",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}. üòî "
            "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.",
            parse_mode="HTML"
        )

@dp.callback_query(lambda callback: callback.data == "cancel_feedback")
async def cancel_feedback_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã /feedback."""
    user_id = callback.from_user.id
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è /feedback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id not in user_data:
        user_data[user_id] = {
            'history': [], 
            'active_topic': None, 
            'premium': False, 
            'expiry': None, 
            'last_pay_message_id': None,
            'awaiting_feedback': False,
            'feedback_message_id': None,
            'user_feedback_message_id': None
        }
    if user_data[user_id].get('awaiting_feedback', False):
        user_data[user_id]['awaiting_feedback'] = False
        try:
            if user_data[user_id].get('feedback_message_id'):
                await bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=user_data[user_id]['feedback_message_id']
                )
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            if user_data[user_id].get('user_feedback_message_id'):
                await bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=user_data[user_id]['user_feedback_message_id']
                )
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /feedback –¥–ª—è {user_id}")
            await callback.message.answer(
                "–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π.",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π /feedback: {e}")
            await callback.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                parse_mode="HTML"
            )
        user_data[user_id]['feedback_message_id'] = None
        user_data[user_id]['user_feedback_message_id'] = None
    else:
        await callback.message.answer(
            "–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! üòä –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≠–º–º–æ–π.",
            parse_mode="HTML"
        )
    await callback.answer()
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.callback_query(lambda callback: callback.data == "start_pay")
async def start_pay_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    user_id = callback.from_user.id
    logging.info(f"Callback start_pay –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    pay_text = (
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≠–º–º—É! –≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, "
        "–ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –¥–æ–≤–µ—Ä–∏–µ!"
    )
    try:
        last_pay_message_id = user_data.get(user_id, {}).get('last_pay_message_id')
        if last_pay_message_id:
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=last_pay_message_id
            )
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_pay_message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await bot.send_invoice(
            chat_id=callback.message.chat.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≠–º–º—É",
            description=pay_text,
            payload="emma_premium_monthly_001",
            provider_token="",
            currency="XTR",
            prices=[{"label": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", "amount": 250}],
            start_parameter="pay",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≠–º–º—É", pay=True)]
            ])
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–ø–ª–∞—Ç—ã. üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
            parse_mode="HTML"
        )
        await callback.answer()
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout query –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    user_id = pre_checkout_query.from_user.id
    logging.info(f"Pre-checkout query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {pre_checkout_query.invoice_payload}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@dp.message(lambda message: message.successful_payment is not None)
async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload
    logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payload}")
    if payload == "emma_premium_monthly_001":
        expiry_date = datetime.now() + timedelta(days=30)
        user_data[user_id]['premium'] = True
        user_data[user_id]['expiry'] = expiry_date.timestamp()
        if db:
            try:
                doc_ref = db.collection('users').document(str(user_id))
                doc_ref.set({
                    'premium': True,
                    'expiry': expiry_date,
                    'timestamp': firestore.SERVER_TIMESTAMP
                }, merge=True)
                logging.info(f"Premium-—Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Firestore –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è premium-—Å—Ç–∞—Ç—É—Å–∞ –≤ Firestore: {e}")
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ç—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üéâ "
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date.strftime('%Y-%m-%d')}. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üòä‚ú®",
            parse_mode="HTML"
        )

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update –¥–ª—è user {message.from_user.id}: {message.text[:50]}...")
    if not message.text:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üòä –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–º–æ–≥—É.")
        return
    
    user_id = message.from_user.id
    user_text = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text}")
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(0.5)
    
    if user_id not in user_data:
        user_data[user_id] = {
            'history': [], 
            'active_topic': None, 
            'premium': False, 
            'expiry': None, 
            'last_pay_message_id': None,
            'awaiting_feedback': False,
            'feedback_message_id': None,
            'user_feedback_message_id': None
        }
    
    if user_data[user_id].get('awaiting_feedback', False):
        if not FEEDBACK_CHAT_ID:
            logging.error("FEEDBACK_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
            await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", parse_mode="HTML")
            user_data[user_id]['awaiting_feedback'] = False
            user_data[user_id]['feedback_message_id'] = None
            user_data[user_id]['user_feedback_message_id'] = None
            if db:
                try:
                    db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")
            return
        
        username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
        feedback_text = (
            f"<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{username} (ID: {user_id})</b>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}\n\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/reply {user_id} –í–∞—à –æ—Ç–≤–µ—Ç</b>"
        )
        try:
            await bot.send_message(
                chat_id=FEEDBACK_CHAT_ID,
                text=feedback_text,
                parse_mode="HTML"
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç {user_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {FEEDBACK_CHAT_ID}")
            try:
                if user_data[user_id].get('feedback_message_id'):
                    await bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=user_data[user_id]['feedback_message_id']
                    )
                    logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                if user_data[user_id].get('user_feedback_message_id'):
                    await bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=user_data[user_id]['user_feedback_message_id']
                    )
                    logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /feedback –¥–ª—è {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π /feedback: {e}")
            await message.answer(
                "<b>–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!</b> üôå\n\n"
                "–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—é —Ç–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–µ—Ä–µ–¥–∞–º –µ—ë –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. "
                "–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–ª–∞—Ç—å ¬´–≠–º–º—É¬ª —É–º–Ω–µ–µ, –¥–æ–±—Ä–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–∏—Å–∞—Ç—å ‚Äî "
                "—è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å.\n\n"
                "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π!</b> üí´",
                parse_mode="HTML"
            )
            user_data[user_id]['awaiting_feedback'] = False
            user_data[user_id]['feedback_message_id'] = None
            user_data[user_id]['user_feedback_message_id'] = None
            if db:
                try:
                    db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")
            return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {FEEDBACK_CHAT_ID}: {e}")
            await message.answer(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ! üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                parse_mode="HTML"
            )
            user_data[user_id]['awaiting_feedback'] = False
            user_data[user_id]['feedback_message_id'] = None
            user_data[user_id]['user_feedback_message_id'] = None
            if db:
                try:
                    db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")
            return
    
    history = user_data[user_id]['history']
    active_topic = user_data[user_id]['active_topic']
    is_code_request = any(keyword in user_text.lower() for keyword in [
        "–Ω–∞–ø–∏—à–∏ –∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∫–æ–¥ –Ω–∞", "python", "javascript",
        "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É", "–∫–æ–¥ –Ω–∞ –ø–∏—Ç–æ–Ω–µ", "–∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"
    ])
    history.append({"role": "user", "content": user_text})
    search_data = None
    if not is_code_request:
        is_clarification = any(keyword in user_text.lower() for keyword in clarification_keywords)
        if is_clarification:
            search_query = active_topic if active_topic else user_text
            search_data = await get_google_cse_info(search_query, active_topic)
            if search_data and not is_relevant(search_data, user_text, active_topic):
                logging.info(f"–ü–æ–∏—Å–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –¥–ª—è '{user_text}', fallback –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
                search_data = None
        else:
            search_data = await get_google_cse_info(user_text)
            if search_data and not is_relevant(search_data, user_text):
                logging.info(f"–ü–æ–∏—Å–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –¥–ª—è '{user_text}', fallback –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
                search_data = None
        if search_data:
            logging.info(f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(search_data)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        if isinstance(search_data, str):
            response = search_data
            await send_long_message(message, response, parse_mode="HTML")
        else:
            response = await get_unlim_response(user_id, user_text, history, is_code_request, search_data, use_html=True)
            await send_long_message(message, response, parse_mode="HTML")
    else:
        response = await get_unlim_response(user_id, user_text, history, is_code_request)
        await send_long_message(message, response, parse_mode="HTML")
    history.append({"role": "assistant", "content": response})
    user_data[user_id]['history'] = history[-20:]
    user_data[user_id]['active_topic'] = extract_topic(response)
    logging.info(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data[user_id]['history']}")
    logging.info(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data[user_id]['active_topic']}")
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")
    logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ update –¥–ª—è user {user_id}")

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    user_id = callback.from_user.id
    action = callback.data
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {action}")
    await callback.message.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    await asyncio.sleep(0.5)
    
    if action == "cancel_feedback":
        await cancel_feedback_callback(callback)
        return
    
    if user_id not in user_data:
        user_data[user_id] = {
            'history': [], 
            'active_topic': None, 
            'premium': False, 
            'expiry': None, 
            'last_pay_message_id': None,
            'awaiting_feedback': False,
            'feedback_message_id': None,
            'user_feedback_message_id': None
        }
    history = user_data[user_id]['history']
    active_topic = user_data[user_id]['active_topic']
    response = await get_unlim_response(user_id, action, history, is_code_request=False, use_html=True)
    await send_long_message(callback.message, response, parse_mode="HTML")
    history.append({"role": "assistant", "content": response})
    user_data[user_id]['history'] = history[-20:]
    user_data[user_id]['active_topic'] = extract_topic(response)
    await callback.answer()
    if db:
        try:
            db.collection('users').document(str(user_id)).set(user_data[user_id], merge=True)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã user_data –¥–ª—è {user_id} –≤ Firestore")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

@asynccontextmanager
async def lifespan(app: FastAPI):
    logging.info("–ó–∞–ø—É—Å–∫ lifespan: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    try:
        render_url = os.getenv('RENDER_URL', 'emma-bot-render.onrender.com')
        webhook_url = f"https://{render_url}/webhook"
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –Ω–∞ {webhook_url}")
        await bot.set_webhook(webhook_url)
        info = await bot.get_webhook_info()
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: url={info.url}, pending_updates={info.pending_update_count}")
        await set_bot_commands()
        if db:
            try:
                docs = db.collection('users').stream()
                for doc in docs:
                    try:
                        user_id_int = int(doc.id)
                        user_data[user_id_int] = doc.to_dict()
                        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int} –∏–∑ Firestore")
                    except ValueError:
                        logging.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ user_id: {doc.id} (–Ω–µ —á–∏—Å–ª–æ)")
                logging.info("–í—Å–µ user_data –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Firestore")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_data –∏–∑ Firestore: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ lifespan (startup): {e}", exc_info=True)
    yield
    try:
        await bot.delete_webhook()
        logging.info("Webhook —É–¥–∞–ª—ë–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ lifespan (shutdown): {e}", exc_info=True)

app = FastAPI(lifespan=lifespan)

@app.get("/health")
async def health_check():
    logging.info("–ó–∞–ø—Ä–æ—Å –∫ /health")
    try:
        info = await bot.get_webhook_info()
        logging.info(f"Health check —É—Å–ø–µ—à–µ–Ω: webhook_url={info.url}, pending_updates={info.pending_update_count}")
        return {
            "status": "ok",
            "bot_ready": True,
            "webhook_url": info.url,
            "pending_updates": info.pending_update_count
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ health check: {e}", exc_info=True)
        return {"status": "error", "bot_ready": False, "error": str(e)}

@app.post("/webhook")
async def webhook(request: Request):
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /webhook")
    try:
        update = await request.json()
        update_id = update.get('update_id')
        if update_id in processed_updates:
            logging.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é –¥—É–±–ª–∏–∫–∞—Ç update_id: {update_id}")
            return {"status": "ok"}
        processed_updates.add(update_id)
        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é update_id: {update_id}, text={update.get('message', {}).get('text', 'no text')[:50]}...")
        await dp.feed_update(bot, types.Update(**update))
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω update_id: {update_id}")
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}", exc_info=True)
        return {"status": "error", "error": str(e)}

if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ uvicorn")
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)), workers=1)